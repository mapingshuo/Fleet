// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* ChunkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TalkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2foptions_2eproto() {
  protobuf_AddDesc_brpc_2foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/options.proto");
  GOOGLE_CHECK(file != NULL);
  ChunkInfo_descriptor_ = file->message_type(0);
  static const int ChunkInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkInfo, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkInfo, chunk_id_),
  };
  ChunkInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChunkInfo_descriptor_,
      ChunkInfo::default_instance_,
      ChunkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChunkInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkInfo, _internal_metadata_),
      -1);
  TalkType_descriptor_ = file->enum_type(0);
  ConnectionType_descriptor_ = file->enum_type(1);
  ProtocolType_descriptor_ = file->enum_type(2);
  CompressType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChunkInfo_descriptor_, &ChunkInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2foptions_2eproto() {
  delete ChunkInfo::default_instance_;
  delete ChunkInfo_reflection_;
}

void protobuf_AddDesc_brpc_2foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022brpc/options.proto\022\004brpc\032 google/proto"
    "buf/descriptor.proto\"0\n\tChunkInfo\022\021\n\tstr"
    "eam_id\030\001 \002(\003\022\020\n\010chunk_id\030\002 \002(\003*6\n\010TalkTy"
    "pe\022\024\n\020TALK_TYPE_NORMAL\020\000\022\024\n\020TALK_TYPE_ON"
    "EWAY\020\001*\200\001\n\016ConnectionType\022\033\n\027CONNECTION_"
    "TYPE_UNKNOWN\020\000\022\032\n\026CONNECTION_TYPE_SINGLE"
    "\020\001\022\032\n\026CONNECTION_TYPE_POOLED\020\002\022\031\n\025CONNEC"
    "TION_TYPE_SHORT\020\004*\351\004\n\014ProtocolType\022\024\n\020PR"
    "OTOCOL_UNKNOWN\020\000\022\026\n\022PROTOCOL_BAIDU_STD\020\001"
    "\022\032\n\026PROTOCOL_STREAMING_RPC\020\002\022\027\n\023PROTOCOL"
    "_HULU_PBRPC\020\003\022\027\n\023PROTOCOL_SOFA_PBRPC\020\004\022\021"
    "\n\rPROTOCOL_RTMP\020\005\022\021\n\rPROTOCOL_HTTP\020\006\022\031\n\025"
    "PROTOCOL_PUBLIC_PBRPC\020\007\022\027\n\023PROTOCOL_NOVA"
    "_PBRPC\020\010\022\032\n\026PROTOCOL_NSHEAD_CLIENT\020\t\022\023\n\017"
    "PROTOCOL_NSHEAD\020\n\022\027\n\023PROTOCOL_HADOOP_RPC"
    "\020\013\022\036\n\032PROTOCOL_HADOOP_SERVER_RPC\020\014\022\022\n\016PR"
    "OTOCOL_MONGO\020\r\022\032\n\026PROTOCOL_UBRPC_COMPACK"
    "\020\016\022\030\n\024PROTOCOL_DIDX_CLIENT\020\017\022\022\n\016PROTOCOL"
    "_REDIS\020\020\022\025\n\021PROTOCOL_MEMCACHE\020\021\022\020\n\014PROTO"
    "COL_ITP\020\022\022\032\n\026PROTOCOL_NSHEAD_MCPACK\020\023\022\025\n"
    "\021PROTOCOL_DISP_IDL\020\024\022\031\n\025PROTOCOL_ERSDA_C"
    "LIENT\020\025\022\032\n\026PROTOCOL_UBRPC_MCPACK2\020\026\022\026\n\022P"
    "ROTOCOL_CDS_AGENT\020\027\022\020\n\014PROTOCOL_ESP\020\030*\207\001"
    "\n\014CompressType\022\026\n\022COMPRESS_TYPE_NONE\020\000\022\030"
    "\n\024COMPRESS_TYPE_SNAPPY\020\001\022\026\n\022COMPRESS_TYP"
    "E_GZIP\020\002\022\026\n\022COMPRESS_TYPE_ZLIB\020\003\022\025\n\021COMP"
    "RESS_TYPE_LZ4\020\004:A\n\017service_timeout\022\037.goo"
    "gle.protobuf.ServiceOptions\030\220\277\005 \001(\003:\005100"
    "00:]\n\021request_talk_type\022\036.google.protobu"
    "f.MethodOptions\030\221\277\005 \001(\0162\016.brpc.TalkType:"
    "\020TALK_TYPE_NORMAL:^\n\022response_talk_type\022"
    "\036.google.protobuf.MethodOptions\030\222\277\005 \001(\0162"
    "\016.brpc.TalkType:\020TALK_TYPE_NORMAL:8\n\016met"
    "hod_timeout\022\036.google.protobuf.MethodOpti"
    "ons\030\223\277\005 \001(\003:e\n\023request_compression\022\036.goo"
    "gle.protobuf.MethodOptions\030\224\277\005 \001(\0162\022.brp"
    "c.CompressType:\022COMPRESS_TYPE_NONE:f\n\024re"
    "sponse_compression\022\036.google.protobuf.Met"
    "hodOptions\030\225\277\005 \001(\0162\022.brpc.CompressType:\022"
    "COMPRESS_TYPE_NONEB\023\n\010com.brpcB\007Options", 1599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/options.proto", &protobuf_RegisterTypes);
  ChunkInfo::default_instance_ = new ChunkInfo();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::ServiceOptions::default_instance(),
    90000, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    90001, 14, false, false,
    &::brpc::TalkType_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    90002, 14, false, false,
    &::brpc::TalkType_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    90003, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    90004, 14, false, false,
    &::brpc::CompressType_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    90005, 14, false, false,
    &::brpc::CompressType_IsValid);
  ChunkInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2foptions_2eproto {
  StaticDescriptorInitializer_brpc_2foptions_2eproto() {
    protobuf_AddDesc_brpc_2foptions_2eproto();
  }
} static_descriptor_initializer_brpc_2foptions_2eproto_;
const ::google::protobuf::EnumDescriptor* TalkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkType_descriptor_;
}
bool TalkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionType_descriptor_;
}
bool ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolType_descriptor_;
}
bool ProtocolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressType_descriptor_;
}
bool CompressType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkInfo::kStreamIdFieldNumber;
const int ChunkInfo::kChunkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkInfo::ChunkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.ChunkInfo)
}

void ChunkInfo::InitAsDefaultInstance() {
}

ChunkInfo::ChunkInfo(const ChunkInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.ChunkInfo)
}

void ChunkInfo::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  chunk_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkInfo::~ChunkInfo() {
  // @@protoc_insertion_point(destructor:brpc.ChunkInfo)
  SharedDtor();
}

void ChunkInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkInfo_descriptor_;
}

const ChunkInfo& ChunkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2foptions_2eproto();
  return *default_instance_;
}

ChunkInfo* ChunkInfo::default_instance_ = NULL;

ChunkInfo* ChunkInfo::New(::google::protobuf::Arena* arena) const {
  ChunkInfo* n = new ChunkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.ChunkInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChunkInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChunkInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stream_id_, chunk_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChunkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.ChunkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chunk_id;
        break;
      }

      // required int64 chunk_id = 2;
      case 2: {
        if (tag == 16) {
         parse_chunk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_id_)));
          set_has_chunk_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.ChunkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.ChunkInfo)
  return false;
#undef DO_
}

void ChunkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.ChunkInfo)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // required int64 chunk_id = 2;
  if (has_chunk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunk_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.ChunkInfo)
}

::google::protobuf::uint8* ChunkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.ChunkInfo)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // required int64 chunk_id = 2;
  if (has_chunk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunk_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.ChunkInfo)
  return target;
}

int ChunkInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.ChunkInfo)
  int total_size = 0;

  if (has_stream_id()) {
    // required int64 stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }

  if (has_chunk_id()) {
    // required int64 chunk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_id());
  }

  return total_size;
}
int ChunkInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.ChunkInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());

    // required int64 chunk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.ChunkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChunkInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.ChunkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.ChunkInfo)
    MergeFrom(*source);
  }
}

void ChunkInfo::MergeFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.ChunkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_chunk_id()) {
      set_chunk_id(from.chunk_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChunkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.ChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkInfo::CopyFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.ChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChunkInfo::Swap(ChunkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkInfo::InternalSwap(ChunkInfo* other) {
  std::swap(stream_id_, other->stream_id_);
  std::swap(chunk_id_, other->chunk_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkInfo_descriptor_;
  metadata.reflection = ChunkInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkInfo

// required int64 stream_id = 1;
bool ChunkInfo::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChunkInfo::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChunkInfo::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChunkInfo::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
 ::google::protobuf::int64 ChunkInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.ChunkInfo.stream_id)
  return stream_id_;
}
 void ChunkInfo::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.ChunkInfo.stream_id)
}

// required int64 chunk_id = 2;
bool ChunkInfo::has_chunk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChunkInfo::set_has_chunk_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ChunkInfo::clear_has_chunk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChunkInfo::clear_chunk_id() {
  chunk_id_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_id();
}
 ::google::protobuf::int64 ChunkInfo::chunk_id() const {
  // @@protoc_insertion_point(field_get:brpc.ChunkInfo.chunk_id)
  return chunk_id_;
}
 void ChunkInfo::set_chunk_id(::google::protobuf::int64 value) {
  set_has_chunk_id();
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.ChunkInfo.chunk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  service_timeout(kServiceTimeoutFieldNumber, GOOGLE_LONGLONG(10000));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  request_talk_type(kRequestTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  response_talk_type(kResponseTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  method_timeout(kMethodTimeoutFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  request_compression(kRequestCompressionFieldNumber, static_cast< ::brpc::CompressType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  response_compression(kResponseCompressionFieldNumber, static_cast< ::brpc::CompressType >(0));

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
