// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/baidu_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* RpcMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcRequestMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequestMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcResponseMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcResponseMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/baidu_rpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  RpcMeta_descriptor_ = file->message_type(0);
  static const int RpcMeta_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, compress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, correlation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, attachment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, chunk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, authentication_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, stream_settings_),
  };
  RpcMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcMeta_descriptor_,
      RpcMeta::default_instance_,
      RpcMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(RpcMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _internal_metadata_),
      -1);
  RpcRequestMeta_descriptor_ = file->message_type(1);
  static const int RpcRequestMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, parent_span_id_),
  };
  RpcRequestMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcRequestMeta_descriptor_,
      RpcRequestMeta::default_instance_,
      RpcRequestMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(RpcRequestMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _internal_metadata_),
      -1);
  RpcResponseMeta_descriptor_ = file->message_type(2);
  static const int RpcResponseMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, error_text_),
  };
  RpcResponseMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcResponseMeta_descriptor_,
      RpcResponseMeta::default_instance_,
      RpcResponseMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(RpcResponseMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcMeta_descriptor_, &RpcMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcRequestMeta_descriptor_, &RpcRequestMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcResponseMeta_descriptor_, &RpcResponseMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  delete RpcMeta::default_instance_;
  delete RpcMeta_reflection_;
  delete RpcRequestMeta::default_instance_;
  delete RpcRequestMeta_reflection_;
  delete RpcResponseMeta::default_instance_;
  delete RpcResponseMeta_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::brpc::protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n brpc/policy/baidu_rpc_meta.proto\022\013brpc"
    ".policy\032\022brpc/options.proto\032\035brpc/stream"
    "ing_rpc_meta.proto\"\240\002\n\007RpcMeta\022,\n\007reques"
    "t\030\001 \001(\0132\033.brpc.policy.RpcRequestMeta\022.\n\010"
    "response\030\002 \001(\0132\034.brpc.policy.RpcResponse"
    "Meta\022\025\n\rcompress_type\030\003 \001(\005\022\026\n\016correlati"
    "on_id\030\004 \001(\003\022\027\n\017attachment_size\030\005 \001(\005\022#\n\n"
    "chunk_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\033\n\023aut"
    "hentication_data\030\007 \001(\014\022-\n\017stream_setting"
    "s\030\010 \001(\0132\024.brpc.StreamSettings\"\206\001\n\016RpcReq"
    "uestMeta\022\024\n\014service_name\030\001 \002(\t\022\023\n\013method"
    "_name\030\002 \002(\t\022\016\n\006log_id\030\003 \001(\003\022\020\n\010trace_id\030"
    "\004 \001(\003\022\017\n\007span_id\030\005 \001(\003\022\026\n\016parent_span_id"
    "\030\006 \001(\003\"9\n\017RpcResponseMeta\022\022\n\nerror_code\030"
    "\001 \001(\005\022\022\n\nerror_text\030\002 \001(\tB \n\017com.brpc.po"
    "licyB\rBaiduRpcProto", 619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/baidu_rpc_meta.proto", &protobuf_RegisterTypes);
  RpcMeta::default_instance_ = new RpcMeta();
  RpcRequestMeta::default_instance_ = new RpcRequestMeta();
  RpcResponseMeta::default_instance_ = new RpcResponseMeta();
  RpcMeta::default_instance_->InitAsDefaultInstance();
  RpcRequestMeta::default_instance_->InitAsDefaultInstance();
  RpcResponseMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kRequestFieldNumber;
const int RpcMeta::kResponseFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
const int RpcMeta::kCorrelationIdFieldNumber;
const int RpcMeta::kAttachmentSizeFieldNumber;
const int RpcMeta::kChunkInfoFieldNumber;
const int RpcMeta::kAuthenticationDataFieldNumber;
const int RpcMeta::kStreamSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcMeta)
}

void RpcMeta::InitAsDefaultInstance() {
  request_ = const_cast< ::brpc::policy::RpcRequestMeta*>(&::brpc::policy::RpcRequestMeta::default_instance());
  response_ = const_cast< ::brpc::policy::RpcResponseMeta*>(&::brpc::policy::RpcResponseMeta::default_instance());
  chunk_info_ = const_cast< ::brpc::ChunkInfo*>(&::brpc::ChunkInfo::default_instance());
  stream_settings_ = const_cast< ::brpc::StreamSettings*>(&::brpc::StreamSettings::default_instance());
}

RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcMeta)
}

void RpcMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  compress_type_ = 0;
  correlation_id_ = GOOGLE_LONGLONG(0);
  attachment_size_ = 0;
  chunk_info_ = NULL;
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  authentication_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete chunk_info_;
    delete stream_settings_;
  }
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMeta_descriptor_;
}

const RpcMeta& RpcMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

RpcMeta* RpcMeta::default_instance_ = NULL;

RpcMeta* RpcMeta::New(::google::protobuf::Arena* arena) const {
  RpcMeta* n = new RpcMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcMeta)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RpcMeta, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RpcMeta*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(correlation_id_, attachment_size_);
    if (has_request()) {
      if (request_ != NULL) request_->::brpc::policy::RpcRequestMeta::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::brpc::policy::RpcResponseMeta::Clear();
    }
    if (has_chunk_info()) {
      if (chunk_info_ != NULL) chunk_info_->::brpc::ChunkInfo::Clear();
    }
    if (has_authentication_data()) {
      authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stream_settings()) {
      if (stream_settings_ != NULL) stream_settings_->::brpc::StreamSettings::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RpcRequestMeta request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .brpc.policy.RpcResponseMeta response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compress_type;
        break;
      }

      // optional int32 compress_type = 3;
      case 3: {
        if (tag == 24) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_correlation_id;
        break;
      }

      // optional int64 correlation_id = 4;
      case 4: {
        if (tag == 32) {
         parse_correlation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
          set_has_correlation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_attachment_size;
        break;
      }

      // optional int32 attachment_size = 5;
      case 5: {
        if (tag == 40) {
         parse_attachment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
          set_has_attachment_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chunk_info;
        break;
      }

      // optional .brpc.ChunkInfo chunk_info = 6;
      case 6: {
        if (tag == 50) {
         parse_chunk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_authentication_data;
        break;
      }

      // optional bytes authentication_data = 7;
      case 7: {
        if (tag == 58) {
         parse_authentication_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stream_settings;
        break;
      }

      // optional .brpc.StreamSettings stream_settings = 8;
      case 8: {
        if (tag == 66) {
         parse_stream_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcMeta)
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compress_type(), output);
  }

  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->correlation_id(), output);
  }

  // optional int32 attachment_size = 5;
  if (has_attachment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attachment_size(), output);
  }

  // optional .brpc.ChunkInfo chunk_info = 6;
  if (has_chunk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->chunk_info_, output);
  }

  // optional bytes authentication_data = 7;
  if (has_authentication_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->authentication_data(), output);
  }

  // optional .brpc.StreamSettings stream_settings = 8;
  if (has_stream_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stream_settings_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcMeta)
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->correlation_id(), target);
  }

  // optional int32 attachment_size = 5;
  if (has_attachment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attachment_size(), target);
  }

  // optional .brpc.ChunkInfo chunk_info = 6;
  if (has_chunk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->chunk_info_, false, target);
  }

  // optional bytes authentication_data = 7;
  if (has_authentication_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->authentication_data(), target);
  }

  // optional .brpc.StreamSettings stream_settings = 8;
  if (has_stream_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stream_settings_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcMeta)
  return target;
}

int RpcMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcMeta)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .brpc.policy.RpcRequestMeta request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .brpc.policy.RpcResponseMeta response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

    // optional int32 compress_type = 3;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional int64 correlation_id = 4;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

    // optional int32 attachment_size = 5;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }

    // optional .brpc.ChunkInfo chunk_info = 6;
    if (has_chunk_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chunk_info_);
    }

    // optional bytes authentication_data = 7;
    if (has_authentication_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->authentication_data());
    }

    // optional .brpc.StreamSettings stream_settings = 8;
    if (has_stream_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stream_settings_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::brpc::policy::RpcRequestMeta::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::brpc::policy::RpcResponseMeta::MergeFrom(from.response());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
    if (from.has_correlation_id()) {
      set_correlation_id(from.correlation_id());
    }
    if (from.has_attachment_size()) {
      set_attachment_size(from.attachment_size());
    }
    if (from.has_chunk_info()) {
      mutable_chunk_info()->::brpc::ChunkInfo::MergeFrom(from.chunk_info());
    }
    if (from.has_authentication_data()) {
      set_has_authentication_data();
      authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
    }
    if (from.has_stream_settings()) {
      mutable_stream_settings()->::brpc::StreamSettings::MergeFrom(from.stream_settings());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {

  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_chunk_info()) {
    if (!this->chunk_info_->IsInitialized()) return false;
  }
  if (has_stream_settings()) {
    if (!this->stream_settings_->IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(compress_type_, other->compress_type_);
  std::swap(correlation_id_, other->correlation_id_);
  std::swap(attachment_size_, other->attachment_size_);
  std::swap(chunk_info_, other->chunk_info_);
  authentication_data_.Swap(&other->authentication_data_);
  std::swap(stream_settings_, other->stream_settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMeta_descriptor_;
  metadata.reflection = RpcMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMeta

// optional .brpc.policy.RpcRequestMeta request = 1;
bool RpcMeta::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcMeta::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcMeta::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcMeta::clear_request() {
  if (request_ != NULL) request_->::brpc::policy::RpcRequestMeta::Clear();
  clear_has_request();
}
const ::brpc::policy::RpcRequestMeta& RpcMeta::request() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::brpc::policy::RpcRequestMeta* RpcMeta::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::brpc::policy::RpcRequestMeta;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.request)
  return request_;
}
::brpc::policy::RpcRequestMeta* RpcMeta::release_request() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.request)
  clear_has_request();
  ::brpc::policy::RpcRequestMeta* temp = request_;
  request_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_request(::brpc::policy::RpcRequestMeta* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.request)
}

// optional .brpc.policy.RpcResponseMeta response = 2;
bool RpcMeta::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcMeta::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcMeta::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcMeta::clear_response() {
  if (response_ != NULL) response_->::brpc::policy::RpcResponseMeta::Clear();
  clear_has_response();
}
const ::brpc::policy::RpcResponseMeta& RpcMeta::response() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::brpc::policy::RpcResponseMeta* RpcMeta::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::brpc::policy::RpcResponseMeta;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.response)
  return response_;
}
::brpc::policy::RpcResponseMeta* RpcMeta::release_response() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.response)
  clear_has_response();
  ::brpc::policy::RpcResponseMeta* temp = response_;
  response_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_response(::brpc::policy::RpcResponseMeta* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.response)
}

// optional int32 compress_type = 3;
bool RpcMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
 ::google::protobuf::int32 RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.compress_type)
  return compress_type_;
}
 void RpcMeta::set_compress_type(::google::protobuf::int32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.compress_type)
}

// optional int64 correlation_id = 4;
bool RpcMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RpcMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RpcMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RpcMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_LONGLONG(0);
  clear_has_correlation_id();
}
 ::google::protobuf::int64 RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.correlation_id)
  return correlation_id_;
}
 void RpcMeta::set_correlation_id(::google::protobuf::int64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.correlation_id)
}

// optional int32 attachment_size = 5;
bool RpcMeta::has_attachment_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RpcMeta::set_has_attachment_size() {
  _has_bits_[0] |= 0x00000010u;
}
void RpcMeta::clear_has_attachment_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void RpcMeta::clear_attachment_size() {
  attachment_size_ = 0;
  clear_has_attachment_size();
}
 ::google::protobuf::int32 RpcMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.attachment_size)
  return attachment_size_;
}
 void RpcMeta::set_attachment_size(::google::protobuf::int32 value) {
  set_has_attachment_size();
  attachment_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.attachment_size)
}

// optional .brpc.ChunkInfo chunk_info = 6;
bool RpcMeta::has_chunk_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RpcMeta::set_has_chunk_info() {
  _has_bits_[0] |= 0x00000020u;
}
void RpcMeta::clear_has_chunk_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void RpcMeta::clear_chunk_info() {
  if (chunk_info_ != NULL) chunk_info_->::brpc::ChunkInfo::Clear();
  clear_has_chunk_info();
}
const ::brpc::ChunkInfo& RpcMeta::chunk_info() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.chunk_info)
  return chunk_info_ != NULL ? *chunk_info_ : *default_instance_->chunk_info_;
}
::brpc::ChunkInfo* RpcMeta::mutable_chunk_info() {
  set_has_chunk_info();
  if (chunk_info_ == NULL) {
    chunk_info_ = new ::brpc::ChunkInfo;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.chunk_info)
  return chunk_info_;
}
::brpc::ChunkInfo* RpcMeta::release_chunk_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.chunk_info)
  clear_has_chunk_info();
  ::brpc::ChunkInfo* temp = chunk_info_;
  chunk_info_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_chunk_info(::brpc::ChunkInfo* chunk_info) {
  delete chunk_info_;
  chunk_info_ = chunk_info;
  if (chunk_info) {
    set_has_chunk_info();
  } else {
    clear_has_chunk_info();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.chunk_info)
}

// optional bytes authentication_data = 7;
bool RpcMeta::has_authentication_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RpcMeta::set_has_authentication_data() {
  _has_bits_[0] |= 0x00000040u;
}
void RpcMeta::clear_has_authentication_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void RpcMeta::clear_authentication_data() {
  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authentication_data();
}
 const ::std::string& RpcMeta::authentication_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.authentication_data)
  return authentication_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcMeta::set_authentication_data(const ::std::string& value) {
  set_has_authentication_data();
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.authentication_data)
}
 void RpcMeta::set_authentication_data(const char* value) {
  set_has_authentication_data();
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RpcMeta.authentication_data)
}
 void RpcMeta::set_authentication_data(const void* value, size_t size) {
  set_has_authentication_data();
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RpcMeta.authentication_data)
}
 ::std::string* RpcMeta::mutable_authentication_data() {
  set_has_authentication_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.authentication_data)
  return authentication_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcMeta::release_authentication_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.authentication_data)
  clear_has_authentication_data();
  return authentication_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcMeta::set_allocated_authentication_data(::std::string* authentication_data) {
  if (authentication_data != NULL) {
    set_has_authentication_data();
  } else {
    clear_has_authentication_data();
  }
  authentication_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authentication_data);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.authentication_data)
}

// optional .brpc.StreamSettings stream_settings = 8;
bool RpcMeta::has_stream_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RpcMeta::set_has_stream_settings() {
  _has_bits_[0] |= 0x00000080u;
}
void RpcMeta::clear_has_stream_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
void RpcMeta::clear_stream_settings() {
  if (stream_settings_ != NULL) stream_settings_->::brpc::StreamSettings::Clear();
  clear_has_stream_settings();
}
const ::brpc::StreamSettings& RpcMeta::stream_settings() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.stream_settings)
  return stream_settings_ != NULL ? *stream_settings_ : *default_instance_->stream_settings_;
}
::brpc::StreamSettings* RpcMeta::mutable_stream_settings() {
  set_has_stream_settings();
  if (stream_settings_ == NULL) {
    stream_settings_ = new ::brpc::StreamSettings;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.stream_settings)
  return stream_settings_;
}
::brpc::StreamSettings* RpcMeta::release_stream_settings() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.stream_settings)
  clear_has_stream_settings();
  ::brpc::StreamSettings* temp = stream_settings_;
  stream_settings_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_stream_settings(::brpc::StreamSettings* stream_settings) {
  delete stream_settings_;
  stream_settings_ = stream_settings;
  if (stream_settings) {
    set_has_stream_settings();
  } else {
    clear_has_stream_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.stream_settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcRequestMeta::kServiceNameFieldNumber;
const int RpcRequestMeta::kMethodNameFieldNumber;
const int RpcRequestMeta::kLogIdFieldNumber;
const int RpcRequestMeta::kTraceIdFieldNumber;
const int RpcRequestMeta::kSpanIdFieldNumber;
const int RpcRequestMeta::kParentSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcRequestMeta)
}

void RpcRequestMeta::InitAsDefaultInstance() {
}

RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcRequestMeta)
}

void RpcRequestMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_id_ = GOOGLE_LONGLONG(0);
  trace_id_ = GOOGLE_LONGLONG(0);
  span_id_ = GOOGLE_LONGLONG(0);
  parent_span_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcRequestMeta)
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequestMeta_descriptor_;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

RpcRequestMeta* RpcRequestMeta::default_instance_ = NULL;

RpcRequestMeta* RpcRequestMeta::New(::google::protobuf::Arena* arena) const {
  RpcRequestMeta* n = new RpcRequestMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcRequestMeta)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RpcRequestMeta, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RpcRequestMeta*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(log_id_, parent_span_id_);
    if (has_service_name()) {
      service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method_name()) {
      method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcRequestMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcRequestMeta.service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }

      // required string method_name = 2;
      case 2: {
        if (tag == 18) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcRequestMeta.method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_id;
        break;
      }

      // optional int64 log_id = 3;
      case 3: {
        if (tag == 24) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trace_id;
        break;
      }

      // optional int64 trace_id = 4;
      case 4: {
        if (tag == 32) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_span_id;
        break;
      }

      // optional int64 span_id = 5;
      case 5: {
        if (tag == 40) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_parent_span_id;
        break;
      }

      // optional int64 parent_span_id = 6;
      case 6: {
        if (tag == 48) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcRequestMeta)
  return false;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcRequestMeta)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional int64 log_id = 3;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_id(), output);
  }

  // optional int64 trace_id = 4;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->trace_id(), output);
  }

  // optional int64 span_id = 5;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->span_id(), output);
  }

  // optional int64 parent_span_id = 6;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->parent_span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcRequestMeta)
}

::google::protobuf::uint8* RpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcRequestMeta)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional int64 log_id = 3;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_id(), target);
  }

  // optional int64 trace_id = 4;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->trace_id(), target);
  }

  // optional int64 span_id = 5;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->span_id(), target);
  }

  // optional int64 parent_span_id = 6;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->parent_span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcRequestMeta)
  return target;
}

int RpcRequestMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RpcRequestMeta)
  int total_size = 0;

  if (has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  if (has_method_name()) {
    // required string method_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  return total_size;
}
int RpcRequestMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcRequestMeta)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());

    // required string method_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional int64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional int64 trace_id = 4;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 span_id = 5;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

    // optional int64 parent_span_id = 6;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcRequestMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcRequestMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcRequestMeta)
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcRequestMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_has_service_name();
      service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (from.has_method_name()) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  service_name_.Swap(&other->service_name_);
  method_name_.Swap(&other->method_name_);
  std::swap(log_id_, other->log_id_);
  std::swap(trace_id_, other->trace_id_);
  std::swap(span_id_, other->span_id_);
  std::swap(parent_span_id_, other->parent_span_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequestMeta_descriptor_;
  metadata.reflection = RpcRequestMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcRequestMeta

// required string service_name = 1;
bool RpcRequestMeta::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcRequestMeta::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcRequestMeta::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcRequestMeta::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
 const ::std::string& RpcRequestMeta::service_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcRequestMeta::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.service_name)
}
 void RpcRequestMeta::set_service_name(const char* value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RpcRequestMeta.service_name)
}
 void RpcRequestMeta::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RpcRequestMeta.service_name)
}
 ::std::string* RpcRequestMeta::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcRequestMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.service_name)
  clear_has_service_name();
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcRequestMeta::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.service_name)
}

// required string method_name = 2;
bool RpcRequestMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcRequestMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcRequestMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
 const ::std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.method_name)
  return method_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcRequestMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.method_name)
}
 void RpcRequestMeta::set_method_name(const char* value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RpcRequestMeta.method_name)
}
 void RpcRequestMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RpcRequestMeta.method_name)
}
 ::std::string* RpcRequestMeta::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.method_name)
  clear_has_method_name();
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.method_name)
}

// optional int64 log_id = 3;
bool RpcRequestMeta::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcRequestMeta::set_has_log_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcRequestMeta::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcRequestMeta::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  clear_has_log_id();
}
 ::google::protobuf::int64 RpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.log_id)
  return log_id_;
}
 void RpcRequestMeta::set_log_id(::google::protobuf::int64 value) {
  set_has_log_id();
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.log_id)
}

// optional int64 trace_id = 4;
bool RpcRequestMeta::has_trace_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RpcRequestMeta::set_has_trace_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RpcRequestMeta::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RpcRequestMeta::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
  clear_has_trace_id();
}
 ::google::protobuf::int64 RpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.trace_id)
  return trace_id_;
}
 void RpcRequestMeta::set_trace_id(::google::protobuf::int64 value) {
  set_has_trace_id();
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.trace_id)
}

// optional int64 span_id = 5;
bool RpcRequestMeta::has_span_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RpcRequestMeta::set_has_span_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RpcRequestMeta::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RpcRequestMeta::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
  clear_has_span_id();
}
 ::google::protobuf::int64 RpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.span_id)
  return span_id_;
}
 void RpcRequestMeta::set_span_id(::google::protobuf::int64 value) {
  set_has_span_id();
  span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.span_id)
}

// optional int64 parent_span_id = 6;
bool RpcRequestMeta::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RpcRequestMeta::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000020u;
}
void RpcRequestMeta::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void RpcRequestMeta::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_span_id();
}
 ::google::protobuf::int64 RpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.parent_span_id)
  return parent_span_id_;
}
 void RpcRequestMeta::set_parent_span_id(::google::protobuf::int64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.parent_span_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcResponseMeta::kErrorCodeFieldNumber;
const int RpcResponseMeta::kErrorTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcResponseMeta)
}

void RpcResponseMeta::InitAsDefaultInstance() {
}

RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcResponseMeta)
}

void RpcResponseMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcResponseMeta)
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResponseMeta_descriptor_;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

RpcResponseMeta* RpcResponseMeta::default_instance_ = NULL;

RpcResponseMeta* RpcResponseMeta::New(::google::protobuf::Arena* arena) const {
  RpcResponseMeta* n = new RpcResponseMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcResponseMeta)
  if (_has_bits_[0 / 32] & 3u) {
    error_code_ = 0;
    if (has_error_text()) {
      error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcResponseMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }

      // optional string error_text = 2;
      case 2: {
        if (tag == 18) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcResponseMeta.error_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcResponseMeta)
  return false;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcResponseMeta)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcResponseMeta.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcResponseMeta)
}

::google::protobuf::uint8* RpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcResponseMeta)
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcResponseMeta.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcResponseMeta)
  return target;
}

int RpcResponseMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcResponseMeta)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcResponseMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcResponseMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcResponseMeta)
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcResponseMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_text()) {
      set_has_error_text();
      error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {

  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  std::swap(error_code_, other->error_code_);
  error_text_.Swap(&other->error_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcResponseMeta_descriptor_;
  metadata.reflection = RpcResponseMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcResponseMeta

// optional int32 error_code = 1;
bool RpcResponseMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcResponseMeta::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcResponseMeta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcResponseMeta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::google::protobuf::int32 RpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_code)
  return error_code_;
}
 void RpcResponseMeta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_code)
}

// optional string error_text = 2;
bool RpcResponseMeta::has_error_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcResponseMeta::set_has_error_text() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcResponseMeta::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcResponseMeta::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
 const ::std::string& RpcResponseMeta::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_text)
  return error_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcResponseMeta::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_text)
}
 void RpcResponseMeta::set_error_text(const char* value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RpcResponseMeta.error_text)
}
 void RpcResponseMeta::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RpcResponseMeta.error_text)
}
 ::std::string* RpcResponseMeta::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcResponseMeta.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcResponseMeta::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcResponseMeta.error_text)
  clear_has_error_text();
  return error_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcResponseMeta::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcResponseMeta.error_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
