// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/public_pbrpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/public_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* PublicPbrpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicPbrpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicPbrpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicPbrpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBody_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/public_pbrpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  PublicPbrpcRequest_descriptor_ = file->message_type(0);
  static const int PublicPbrpcRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, requesthead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, requestbody_),
  };
  PublicPbrpcRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublicPbrpcRequest_descriptor_,
      PublicPbrpcRequest::default_instance_,
      PublicPbrpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PublicPbrpcRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcRequest, _internal_metadata_),
      -1);
  RequestHead_descriptor_ = file->message_type(1);
  static const int RequestHead_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, from_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, accept_charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, compress_type_),
  };
  RequestHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestHead_descriptor_,
      RequestHead::default_instance_,
      RequestHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHead, _internal_metadata_),
      -1);
  RequestBody_descriptor_ = file->message_type(2);
  static const int RequestBody_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, method_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, serialized_request_),
  };
  RequestBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestBody_descriptor_,
      RequestBody::default_instance_,
      RequestBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBody, _internal_metadata_),
      -1);
  PublicPbrpcResponse_descriptor_ = file->message_type(3);
  static const int PublicPbrpcResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, responsehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, responsebody_),
  };
  PublicPbrpcResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublicPbrpcResponse_descriptor_,
      PublicPbrpcResponse::default_instance_,
      PublicPbrpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(PublicPbrpcResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicPbrpcResponse, _internal_metadata_),
      -1);
  ResponseHead_descriptor_ = file->message_type(4);
  static const int ResponseHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, from_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, compress_type_),
  };
  ResponseHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseHead_descriptor_,
      ResponseHead::default_instance_,
      ResponseHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHead, _internal_metadata_),
      -1);
  ResponseBody_descriptor_ = file->message_type(5);
  static const int ResponseBody_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, serialized_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, id_),
  };
  ResponseBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseBody_descriptor_,
      ResponseBody::default_instance_,
      ResponseBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBody, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublicPbrpcRequest_descriptor_, &PublicPbrpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestHead_descriptor_, &RequestHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestBody_descriptor_, &RequestBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublicPbrpcResponse_descriptor_, &PublicPbrpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseHead_descriptor_, &ResponseHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseBody_descriptor_, &ResponseBody::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  delete PublicPbrpcRequest::default_instance_;
  delete PublicPbrpcRequest_reflection_;
  delete RequestHead::default_instance_;
  delete RequestHead_reflection_;
  delete RequestBody::default_instance_;
  delete RequestBody_reflection_;
  delete PublicPbrpcResponse::default_instance_;
  delete PublicPbrpcResponse_reflection_;
  delete ResponseHead::default_instance_;
  delete ResponseHead_reflection_;
  delete ResponseBody::default_instance_;
  delete ResponseBody_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#brpc/policy/public_pbrpc_meta.proto\022\013b"
    "rpc.policy\"r\n\022PublicPbrpcRequest\022-\n\013requ"
    "estHead\030\001 \001(\0132\030.brpc.policy.RequestHead\022"
    "-\n\013requestBody\030\002 \003(\0132\030.brpc.policy.Reque"
    "stBody\"\257\001\n\013RequestHead\022\021\n\tfrom_host\030\001 \001("
    "\t\022\024\n\014content_type\030\002 \001(\r\022\022\n\nconnection\030\003 "
    "\001(\010\022\017\n\007charset\030\004 \001(\t\022\026\n\016accept_charset\030\005"
    " \001(\t\022\023\n\013create_time\030\006 \001(\t\022\016\n\006log_id\030\007 \001("
    "\004\022\025\n\rcompress_type\030\010 \001(\r\"{\n\013RequestBody\022"
    "\017\n\007version\030\001 \001(\t\022\017\n\007charset\030\002 \001(\t\022\017\n\007ser"
    "vice\030\003 \002(\t\022\021\n\tmethod_id\030\004 \002(\r\022\n\n\002id\030\005 \002("
    "\004\022\032\n\022serialized_request\030\006 \001(\014\"w\n\023PublicP"
    "brpcResponse\022/\n\014responseHead\030\001 \001(\0132\031.brp"
    "c.policy.ResponseHead\022/\n\014responseBody\030\002 "
    "\003(\0132\031.brpc.policy.ResponseBody\"T\n\014Respon"
    "seHead\022\014\n\004code\030\001 \002(\021\022\014\n\004text\030\002 \001(\t\022\021\n\tfr"
    "om_host\030\003 \001(\t\022\025\n\rcompress_type\030\004 \001(\r\"W\n\014"
    "ResponseBody\022\033\n\023serialized_response\030\001 \001("
    "\014\022\017\n\007version\030\002 \001(\t\022\r\n\005error\030\003 \001(\005\022\n\n\002id\030"
    "\004 \002(\004B#\n\017com.brpc.policyB\020PublicPbrpcPro"
    "to", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/public_pbrpc_meta.proto", &protobuf_RegisterTypes);
  PublicPbrpcRequest::default_instance_ = new PublicPbrpcRequest();
  RequestHead::default_instance_ = new RequestHead();
  RequestBody::default_instance_ = new RequestBody();
  PublicPbrpcResponse::default_instance_ = new PublicPbrpcResponse();
  ResponseHead::default_instance_ = new ResponseHead();
  ResponseBody::default_instance_ = new ResponseBody();
  PublicPbrpcRequest::default_instance_->InitAsDefaultInstance();
  RequestHead::default_instance_->InitAsDefaultInstance();
  RequestBody::default_instance_->InitAsDefaultInstance();
  PublicPbrpcResponse::default_instance_->InitAsDefaultInstance();
  ResponseHead::default_instance_->InitAsDefaultInstance();
  ResponseBody::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicPbrpcRequest::kRequestHeadFieldNumber;
const int PublicPbrpcRequest::kRequestBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicPbrpcRequest::PublicPbrpcRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcRequest)
}

void PublicPbrpcRequest::InitAsDefaultInstance() {
  requesthead_ = const_cast< ::brpc::policy::RequestHead*>(&::brpc::policy::RequestHead::default_instance());
}

PublicPbrpcRequest::PublicPbrpcRequest(const PublicPbrpcRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcRequest)
}

void PublicPbrpcRequest::SharedCtor() {
  _cached_size_ = 0;
  requesthead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicPbrpcRequest::~PublicPbrpcRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcRequest)
  SharedDtor();
}

void PublicPbrpcRequest::SharedDtor() {
  if (this != default_instance_) {
    delete requesthead_;
  }
}

void PublicPbrpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicPbrpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicPbrpcRequest_descriptor_;
}

const PublicPbrpcRequest& PublicPbrpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

PublicPbrpcRequest* PublicPbrpcRequest::default_instance_ = NULL;

PublicPbrpcRequest* PublicPbrpcRequest::New(::google::protobuf::Arena* arena) const {
  PublicPbrpcRequest* n = new PublicPbrpcRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicPbrpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcRequest)
  if (has_requesthead()) {
    if (requesthead_ != NULL) requesthead_->::brpc::policy::RequestHead::Clear();
  }
  requestbody_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PublicPbrpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RequestHead requestHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesthead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requestBody;
        break;
      }

      // repeated .brpc.policy.RequestBody requestBody = 2;
      case 2: {
        if (tag == 18) {
         parse_requestBody:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requestBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requestbody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_requestBody;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcRequest)
  return false;
#undef DO_
}

void PublicPbrpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcRequest)
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->requesthead_, output);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (unsigned int i = 0, n = this->requestbody_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requestbody(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcRequest)
}

::google::protobuf::uint8* PublicPbrpcRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcRequest)
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->requesthead_, false, target);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (unsigned int i = 0, n = this->requestbody_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->requestbody(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcRequest)
  return target;
}

int PublicPbrpcRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcRequest)
  int total_size = 0;

  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requesthead_);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  total_size += 1 * this->requestbody_size();
  for (int i = 0; i < this->requestbody_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requestbody(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicPbrpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.PublicPbrpcRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PublicPbrpcRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicPbrpcRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.PublicPbrpcRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.PublicPbrpcRequest)
    MergeFrom(*source);
  }
}

void PublicPbrpcRequest::MergeFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  requestbody_.MergeFrom(from.requestbody_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesthead()) {
      mutable_requesthead()->::brpc::policy::RequestHead::MergeFrom(from.requesthead());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PublicPbrpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.PublicPbrpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcRequest::CopyFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->requestbody())) return false;
  return true;
}

void PublicPbrpcRequest::Swap(PublicPbrpcRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicPbrpcRequest::InternalSwap(PublicPbrpcRequest* other) {
  std::swap(requesthead_, other->requesthead_);
  requestbody_.UnsafeArenaSwap(&other->requestbody_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicPbrpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicPbrpcRequest_descriptor_;
  metadata.reflection = PublicPbrpcRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicPbrpcRequest

// optional .brpc.policy.RequestHead requestHead = 1;
bool PublicPbrpcRequest::has_requesthead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublicPbrpcRequest::set_has_requesthead() {
  _has_bits_[0] |= 0x00000001u;
}
void PublicPbrpcRequest::clear_has_requesthead() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublicPbrpcRequest::clear_requesthead() {
  if (requesthead_ != NULL) requesthead_->::brpc::policy::RequestHead::Clear();
  clear_has_requesthead();
}
const ::brpc::policy::RequestHead& PublicPbrpcRequest::requesthead() const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcRequest.requestHead)
  return requesthead_ != NULL ? *requesthead_ : *default_instance_->requesthead_;
}
::brpc::policy::RequestHead* PublicPbrpcRequest::mutable_requesthead() {
  set_has_requesthead();
  if (requesthead_ == NULL) {
    requesthead_ = new ::brpc::policy::RequestHead;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcRequest.requestHead)
  return requesthead_;
}
::brpc::policy::RequestHead* PublicPbrpcRequest::release_requesthead() {
  // @@protoc_insertion_point(field_release:brpc.policy.PublicPbrpcRequest.requestHead)
  clear_has_requesthead();
  ::brpc::policy::RequestHead* temp = requesthead_;
  requesthead_ = NULL;
  return temp;
}
void PublicPbrpcRequest::set_allocated_requesthead(::brpc::policy::RequestHead* requesthead) {
  delete requesthead_;
  requesthead_ = requesthead;
  if (requesthead) {
    set_has_requesthead();
  } else {
    clear_has_requesthead();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.PublicPbrpcRequest.requestHead)
}

// repeated .brpc.policy.RequestBody requestBody = 2;
int PublicPbrpcRequest::requestbody_size() const {
  return requestbody_.size();
}
void PublicPbrpcRequest::clear_requestbody() {
  requestbody_.Clear();
}
const ::brpc::policy::RequestBody& PublicPbrpcRequest::requestbody(int index) const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Get(index);
}
::brpc::policy::RequestBody* PublicPbrpcRequest::mutable_requestbody(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Mutable(index);
}
::brpc::policy::RequestBody* PublicPbrpcRequest::add_requestbody() {
  // @@protoc_insertion_point(field_add:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Add();
}
::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >*
PublicPbrpcRequest::mutable_requestbody() {
  // @@protoc_insertion_point(field_mutable_list:brpc.policy.PublicPbrpcRequest.requestBody)
  return &requestbody_;
}
const ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >&
PublicPbrpcRequest::requestbody() const {
  // @@protoc_insertion_point(field_list:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHead::kFromHostFieldNumber;
const int RequestHead::kContentTypeFieldNumber;
const int RequestHead::kConnectionFieldNumber;
const int RequestHead::kCharsetFieldNumber;
const int RequestHead::kAcceptCharsetFieldNumber;
const int RequestHead::kCreateTimeFieldNumber;
const int RequestHead::kLogIdFieldNumber;
const int RequestHead::kCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHead::RequestHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestHead)
}

void RequestHead::InitAsDefaultInstance() {
}

RequestHead::RequestHead(const RequestHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestHead)
}

void RequestHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
  connection_ = false;
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accept_charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_id_ = GOOGLE_ULONGLONG(0);
  compress_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestHead)
  SharedDtor();
}

void RequestHead::SharedDtor() {
  from_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accept_charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHead_descriptor_;
}

const RequestHead& RequestHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

RequestHead* RequestHead::default_instance_ = NULL;

RequestHead* RequestHead::New(::google::protobuf::Arena* arena) const {
  RequestHead* n = new RequestHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(content_type_, connection_);
    ZR_(log_id_, compress_type_);
    if (has_from_host()) {
      from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_charset()) {
      charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_accept_charset()) {
      accept_charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_create_time()) {
      create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), this->from_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.from_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_content_type;
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (tag == 16) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connection;
        break;
      }

      // optional bool connection = 3;
      case 3: {
        if (tag == 24) {
         parse_connection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_)));
          set_has_connection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charset;
        break;
      }

      // optional string charset = 4;
      case 4: {
        if (tag == 34) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accept_charset;
        break;
      }

      // optional string accept_charset = 5;
      case 5: {
        if (tag == 42) {
         parse_accept_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accept_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accept_charset().data(), this->accept_charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.accept_charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_create_time;
        break;
      }

      // optional string create_time = 6;
      case 6: {
        if (tag == 50) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.create_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 7;
      case 7: {
        if (tag == 56) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_compress_type;
        break;
      }

      // optional uint32 compress_type = 8;
      case 8: {
        if (tag == 64) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestHead)
  return false;
#undef DO_
}

void RequestHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestHead)
  // optional string from_host = 1;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_host(), output);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  // optional bool connection = 3;
  if (has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connection(), output);
  }

  // optional string charset = 4;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charset(), output);
  }

  // optional string accept_charset = 5;
  if (has_accept_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), this->accept_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.accept_charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accept_charset(), output);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.create_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->create_time(), output);
  }

  // optional uint64 log_id = 7;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->log_id(), output);
  }

  // optional uint32 compress_type = 8;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestHead)
}

::google::protobuf::uint8* RequestHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestHead)
  // optional string from_host = 1;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_host(), target);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content_type(), target);
  }

  // optional bool connection = 3;
  if (has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connection(), target);
  }

  // optional string charset = 4;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charset(), target);
  }

  // optional string accept_charset = 5;
  if (has_accept_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), this->accept_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.accept_charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accept_charset(), target);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.create_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->create_time(), target);
  }

  // optional uint64 log_id = 7;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_id(), target);
  }

  // optional uint32 compress_type = 8;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestHead)
  return target;
}

int RequestHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestHead)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_host = 1;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

    // optional uint32 content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

    // optional bool connection = 3;
    if (has_connection()) {
      total_size += 1 + 1;
    }

    // optional string charset = 4;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string accept_charset = 5;
    if (has_accept_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accept_charset());
    }

    // optional string create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional uint64 log_id = 7;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint32 compress_type = 8;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compress_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RequestHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RequestHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RequestHead)
    MergeFrom(*source);
  }
}

void RequestHead::MergeFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_host()) {
      set_has_from_host();
      from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_connection()) {
      set_connection(from.connection());
    }
    if (from.has_charset()) {
      set_has_charset();
      charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (from.has_accept_charset()) {
      set_has_accept_charset();
      accept_charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accept_charset_);
    }
    if (from.has_create_time()) {
      set_has_create_time();
      create_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_time_);
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHead::CopyFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {

  return true;
}

void RequestHead::Swap(RequestHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHead::InternalSwap(RequestHead* other) {
  from_host_.Swap(&other->from_host_);
  std::swap(content_type_, other->content_type_);
  std::swap(connection_, other->connection_);
  charset_.Swap(&other->charset_);
  accept_charset_.Swap(&other->accept_charset_);
  create_time_.Swap(&other->create_time_);
  std::swap(log_id_, other->log_id_);
  std::swap(compress_type_, other->compress_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHead_descriptor_;
  metadata.reflection = RequestHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHead

// optional string from_host = 1;
bool RequestHead::has_from_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestHead::set_has_from_host() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestHead::clear_has_from_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestHead::clear_from_host() {
  from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_host();
}
 const ::std::string& RequestHead::from_host() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.from_host)
  return from_host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_from_host(const ::std::string& value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.from_host)
}
 void RequestHead::set_from_host(const char* value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.from_host)
}
 void RequestHead::set_from_host(const char* value, size_t size) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.from_host)
}
 ::std::string* RequestHead::mutable_from_host() {
  set_has_from_host();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.from_host)
  return from_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestHead::release_from_host() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.from_host)
  clear_has_from_host();
  return from_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_allocated_from_host(::std::string* from_host) {
  if (from_host != NULL) {
    set_has_from_host();
  } else {
    clear_has_from_host();
  }
  from_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_host);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.from_host)
}

// optional uint32 content_type = 2;
bool RequestHead::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestHead::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestHead::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestHead::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
 ::google::protobuf::uint32 RequestHead::content_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.content_type)
  return content_type_;
}
 void RequestHead::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.content_type)
}

// optional bool connection = 3;
bool RequestHead::has_connection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestHead::set_has_connection() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestHead::clear_has_connection() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestHead::clear_connection() {
  connection_ = false;
  clear_has_connection();
}
 bool RequestHead::connection() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.connection)
  return connection_;
}
 void RequestHead::set_connection(bool value) {
  set_has_connection();
  connection_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.connection)
}

// optional string charset = 4;
bool RequestHead::has_charset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestHead::set_has_charset() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestHead::clear_has_charset() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestHead::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charset();
}
 const ::std::string& RequestHead::charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.charset)
  return charset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_charset(const ::std::string& value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.charset)
}
 void RequestHead::set_charset(const char* value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.charset)
}
 void RequestHead::set_charset(const char* value, size_t size) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.charset)
}
 ::std::string* RequestHead::mutable_charset() {
  set_has_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestHead::release_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.charset)
  clear_has_charset();
  return charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    set_has_charset();
  } else {
    clear_has_charset();
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.charset)
}

// optional string accept_charset = 5;
bool RequestHead::has_accept_charset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestHead::set_has_accept_charset() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestHead::clear_has_accept_charset() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestHead::clear_accept_charset() {
  accept_charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accept_charset();
}
 const ::std::string& RequestHead::accept_charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.accept_charset)
  return accept_charset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_accept_charset(const ::std::string& value) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.accept_charset)
}
 void RequestHead::set_accept_charset(const char* value) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.accept_charset)
}
 void RequestHead::set_accept_charset(const char* value, size_t size) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.accept_charset)
}
 ::std::string* RequestHead::mutable_accept_charset() {
  set_has_accept_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.accept_charset)
  return accept_charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestHead::release_accept_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.accept_charset)
  clear_has_accept_charset();
  return accept_charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_allocated_accept_charset(::std::string* accept_charset) {
  if (accept_charset != NULL) {
    set_has_accept_charset();
  } else {
    clear_has_accept_charset();
  }
  accept_charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accept_charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.accept_charset)
}

// optional string create_time = 6;
bool RequestHead::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestHead::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestHead::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestHead::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_create_time();
}
 const ::std::string& RequestHead::create_time() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.create_time)
  return create_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_create_time(const ::std::string& value) {
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.create_time)
}
 void RequestHead::set_create_time(const char* value) {
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.create_time)
}
 void RequestHead::set_create_time(const char* value, size_t size) {
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.create_time)
}
 ::std::string* RequestHead::mutable_create_time() {
  set_has_create_time();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestHead::release_create_time() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.create_time)
  clear_has_create_time();
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestHead::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    set_has_create_time();
  } else {
    clear_has_create_time();
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.create_time)
}

// optional uint64 log_id = 7;
bool RequestHead::has_log_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RequestHead::set_has_log_id() {
  _has_bits_[0] |= 0x00000040u;
}
void RequestHead::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void RequestHead::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
 ::google::protobuf::uint64 RequestHead::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.log_id)
  return log_id_;
}
 void RequestHead::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.log_id)
}

// optional uint32 compress_type = 8;
bool RequestHead::has_compress_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RequestHead::set_has_compress_type() {
  _has_bits_[0] |= 0x00000080u;
}
void RequestHead::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void RequestHead::clear_compress_type() {
  compress_type_ = 0u;
  clear_has_compress_type();
}
 ::google::protobuf::uint32 RequestHead::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.compress_type)
  return compress_type_;
}
 void RequestHead::set_compress_type(::google::protobuf::uint32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.compress_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBody::kVersionFieldNumber;
const int RequestBody::kCharsetFieldNumber;
const int RequestBody::kServiceFieldNumber;
const int RequestBody::kMethodIdFieldNumber;
const int RequestBody::kIdFieldNumber;
const int RequestBody::kSerializedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBody::RequestBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestBody)
}

void RequestBody::InitAsDefaultInstance() {
}

RequestBody::RequestBody(const RequestBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestBody)
}

void RequestBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_id_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  serialized_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestBody)
  SharedDtor();
}

void RequestBody::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBody_descriptor_;
}

const RequestBody& RequestBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

RequestBody* RequestBody::default_instance_ = NULL;

RequestBody* RequestBody::New(::google::protobuf::Arena* arena) const {
  RequestBody* n = new RequestBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestBody)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_charset()) {
      charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_service()) {
      service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    method_id_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_serialized_request()) {
      serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charset;
        break;
      }

      // optional string charset = 2;
      case 2: {
        if (tag == 18) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service;
        break;
      }

      // required string service = 3;
      case 3: {
        if (tag == 26) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_method_id;
        break;
      }

      // required uint32 method_id = 4;
      case 4: {
        if (tag == 32) {
         parse_method_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
          set_has_method_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required uint64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serialized_request;
        break;
      }

      // optional bytes serialized_request = 6;
      case 6: {
        if (tag == 50) {
         parse_serialized_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestBody)
  return false;
#undef DO_
}

void RequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestBody)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string charset = 2;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charset(), output);
  }

  // required string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // required uint32 method_id = 4;
  if (has_method_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->method_id(), output);
  }

  // required uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional bytes serialized_request = 6;
  if (has_serialized_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->serialized_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestBody)
}

::google::protobuf::uint8* RequestBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestBody)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string charset = 2;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charset(), target);
  }

  // required string service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // required uint32 method_id = 4;
  if (has_method_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->method_id(), target);
  }

  // required uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional bytes serialized_request = 6;
  if (has_serialized_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->serialized_request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestBody)
  return target;
}

int RequestBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RequestBody)
  int total_size = 0;

  if (has_service()) {
    // required string service = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  if (has_method_id()) {
    // required uint32 method_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->method_id());
  }

  if (has_id()) {
    // required uint64 id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
int RequestBody::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestBody)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required string service = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());

    // required uint32 method_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->method_id());

    // required uint64 id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 35u) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string charset = 2;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional bytes serialized_request = 6;
    if (has_serialized_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_request());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RequestBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RequestBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RequestBody)
    MergeFrom(*source);
  }
}

void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_charset()) {
      set_has_charset();
      charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (from.has_service()) {
      set_has_service();
      service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
    if (from.has_method_id()) {
      set_method_id(from.method_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serialized_request()) {
      set_has_serialized_request();
      serialized_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void RequestBody::Swap(RequestBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBody::InternalSwap(RequestBody* other) {
  version_.Swap(&other->version_);
  charset_.Swap(&other->charset_);
  service_.Swap(&other->service_);
  std::swap(method_id_, other->method_id_);
  std::swap(id_, other->id_);
  serialized_request_.Swap(&other->serialized_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBody_descriptor_;
  metadata.reflection = RequestBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestBody

// optional string version = 1;
bool RequestBody::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestBody::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestBody::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestBody::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& RequestBody::version() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.version)
}
 void RequestBody::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.version)
}
 void RequestBody::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.version)
}
 ::std::string* RequestBody::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestBody::release_version() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.version)
}

// optional string charset = 2;
bool RequestBody::has_charset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestBody::set_has_charset() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestBody::clear_has_charset() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestBody::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charset();
}
 const ::std::string& RequestBody::charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.charset)
  return charset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_charset(const ::std::string& value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.charset)
}
 void RequestBody::set_charset(const char* value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.charset)
}
 void RequestBody::set_charset(const char* value, size_t size) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.charset)
}
 ::std::string* RequestBody::mutable_charset() {
  set_has_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestBody::release_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.charset)
  clear_has_charset();
  return charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    set_has_charset();
  } else {
    clear_has_charset();
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.charset)
}

// required string service = 3;
bool RequestBody::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestBody::set_has_service() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestBody::clear_has_service() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestBody::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
 const ::std::string& RequestBody::service() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.service)
}
 void RequestBody::set_service(const char* value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.service)
}
 void RequestBody::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.service)
}
 ::std::string* RequestBody::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestBody::release_service() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.service)
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.service)
}

// required uint32 method_id = 4;
bool RequestBody::has_method_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestBody::set_has_method_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestBody::clear_has_method_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestBody::clear_method_id() {
  method_id_ = 0u;
  clear_has_method_id();
}
 ::google::protobuf::uint32 RequestBody::method_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.method_id)
  return method_id_;
}
 void RequestBody::set_method_id(::google::protobuf::uint32 value) {
  set_has_method_id();
  method_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.method_id)
}

// required uint64 id = 5;
bool RequestBody::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestBody::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestBody::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 RequestBody::id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.id)
  return id_;
}
 void RequestBody::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.id)
}

// optional bytes serialized_request = 6;
bool RequestBody::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestBody::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestBody::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestBody::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_request();
}
 const ::std::string& RequestBody::serialized_request() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.serialized_request)
  return serialized_request_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.serialized_request)
}
 void RequestBody::set_serialized_request(const char* value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.serialized_request)
}
 void RequestBody::set_serialized_request(const void* value, size_t size) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.serialized_request)
}
 ::std::string* RequestBody::mutable_serialized_request() {
  set_has_serialized_request();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestBody::release_serialized_request() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.serialized_request)
  clear_has_serialized_request();
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBody::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    set_has_serialized_request();
  } else {
    clear_has_serialized_request();
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.serialized_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicPbrpcResponse::kResponseHeadFieldNumber;
const int PublicPbrpcResponse::kResponseBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicPbrpcResponse::PublicPbrpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcResponse)
}

void PublicPbrpcResponse::InitAsDefaultInstance() {
  responsehead_ = const_cast< ::brpc::policy::ResponseHead*>(&::brpc::policy::ResponseHead::default_instance());
}

PublicPbrpcResponse::PublicPbrpcResponse(const PublicPbrpcResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcResponse)
}

void PublicPbrpcResponse::SharedCtor() {
  _cached_size_ = 0;
  responsehead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicPbrpcResponse::~PublicPbrpcResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcResponse)
  SharedDtor();
}

void PublicPbrpcResponse::SharedDtor() {
  if (this != default_instance_) {
    delete responsehead_;
  }
}

void PublicPbrpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicPbrpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicPbrpcResponse_descriptor_;
}

const PublicPbrpcResponse& PublicPbrpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

PublicPbrpcResponse* PublicPbrpcResponse::default_instance_ = NULL;

PublicPbrpcResponse* PublicPbrpcResponse::New(::google::protobuf::Arena* arena) const {
  PublicPbrpcResponse* n = new PublicPbrpcResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicPbrpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcResponse)
  if (has_responsehead()) {
    if (responsehead_ != NULL) responsehead_->::brpc::policy::ResponseHead::Clear();
  }
  responsebody_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PublicPbrpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.ResponseHead responseHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsehead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responseBody;
        break;
      }

      // repeated .brpc.policy.ResponseBody responseBody = 2;
      case 2: {
        if (tag == 18) {
         parse_responseBody:
          DO_(input->IncrementRecursionDepth());
         parse_loop_responseBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responsebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_responseBody;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcResponse)
  return false;
#undef DO_
}

void PublicPbrpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcResponse)
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->responsehead_, output);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (unsigned int i = 0, n = this->responsebody_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responsebody(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcResponse)
}

::google::protobuf::uint8* PublicPbrpcResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcResponse)
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->responsehead_, false, target);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (unsigned int i = 0, n = this->responsebody_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responsebody(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcResponse)
  return target;
}

int PublicPbrpcResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcResponse)
  int total_size = 0;

  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->responsehead_);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  total_size += 1 * this->responsebody_size();
  for (int i = 0; i < this->responsebody_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responsebody(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicPbrpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.PublicPbrpcResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PublicPbrpcResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicPbrpcResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.PublicPbrpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.PublicPbrpcResponse)
    MergeFrom(*source);
  }
}

void PublicPbrpcResponse::MergeFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  responsebody_.MergeFrom(from.responsebody_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsehead()) {
      mutable_responsehead()->::brpc::policy::ResponseHead::MergeFrom(from.responsehead());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PublicPbrpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.PublicPbrpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcResponse::CopyFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcResponse::IsInitialized() const {

  if (has_responsehead()) {
    if (!this->responsehead_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->responsebody())) return false;
  return true;
}

void PublicPbrpcResponse::Swap(PublicPbrpcResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicPbrpcResponse::InternalSwap(PublicPbrpcResponse* other) {
  std::swap(responsehead_, other->responsehead_);
  responsebody_.UnsafeArenaSwap(&other->responsebody_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicPbrpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicPbrpcResponse_descriptor_;
  metadata.reflection = PublicPbrpcResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicPbrpcResponse

// optional .brpc.policy.ResponseHead responseHead = 1;
bool PublicPbrpcResponse::has_responsehead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublicPbrpcResponse::set_has_responsehead() {
  _has_bits_[0] |= 0x00000001u;
}
void PublicPbrpcResponse::clear_has_responsehead() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublicPbrpcResponse::clear_responsehead() {
  if (responsehead_ != NULL) responsehead_->::brpc::policy::ResponseHead::Clear();
  clear_has_responsehead();
}
const ::brpc::policy::ResponseHead& PublicPbrpcResponse::responsehead() const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcResponse.responseHead)
  return responsehead_ != NULL ? *responsehead_ : *default_instance_->responsehead_;
}
::brpc::policy::ResponseHead* PublicPbrpcResponse::mutable_responsehead() {
  set_has_responsehead();
  if (responsehead_ == NULL) {
    responsehead_ = new ::brpc::policy::ResponseHead;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcResponse.responseHead)
  return responsehead_;
}
::brpc::policy::ResponseHead* PublicPbrpcResponse::release_responsehead() {
  // @@protoc_insertion_point(field_release:brpc.policy.PublicPbrpcResponse.responseHead)
  clear_has_responsehead();
  ::brpc::policy::ResponseHead* temp = responsehead_;
  responsehead_ = NULL;
  return temp;
}
void PublicPbrpcResponse::set_allocated_responsehead(::brpc::policy::ResponseHead* responsehead) {
  delete responsehead_;
  responsehead_ = responsehead;
  if (responsehead) {
    set_has_responsehead();
  } else {
    clear_has_responsehead();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.PublicPbrpcResponse.responseHead)
}

// repeated .brpc.policy.ResponseBody responseBody = 2;
int PublicPbrpcResponse::responsebody_size() const {
  return responsebody_.size();
}
void PublicPbrpcResponse::clear_responsebody() {
  responsebody_.Clear();
}
const ::brpc::policy::ResponseBody& PublicPbrpcResponse::responsebody(int index) const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Get(index);
}
::brpc::policy::ResponseBody* PublicPbrpcResponse::mutable_responsebody(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Mutable(index);
}
::brpc::policy::ResponseBody* PublicPbrpcResponse::add_responsebody() {
  // @@protoc_insertion_point(field_add:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Add();
}
::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >*
PublicPbrpcResponse::mutable_responsebody() {
  // @@protoc_insertion_point(field_mutable_list:brpc.policy.PublicPbrpcResponse.responseBody)
  return &responsebody_;
}
const ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >&
PublicPbrpcResponse::responsebody() const {
  // @@protoc_insertion_point(field_list:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHead::kCodeFieldNumber;
const int ResponseHead::kTextFieldNumber;
const int ResponseHead::kFromHostFieldNumber;
const int ResponseHead::kCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHead::ResponseHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseHead)
}

void ResponseHead::InitAsDefaultInstance() {
}

ResponseHead::ResponseHead(const ResponseHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseHead)
}

void ResponseHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compress_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHead::~ResponseHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseHead)
  SharedDtor();
}

void ResponseHead::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHead_descriptor_;
}

const ResponseHead& ResponseHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

ResponseHead* ResponseHead::default_instance_ = NULL;

ResponseHead* ResponseHead::New(::google::protobuf::Arena* arena) const {
  ResponseHead* n = new ResponseHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(code_, compress_type_);
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_from_host()) {
      from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseHead.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_host;
        break;
      }

      // optional string from_host = 3;
      case 3: {
        if (tag == 26) {
         parse_from_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), this->from_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseHead.from_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compress_type;
        break;
      }

      // optional uint32 compress_type = 4;
      case 4: {
        if (tag == 32) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseHead)
  return false;
#undef DO_
}

void ResponseHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseHead)
  // required sint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->code(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string from_host = 3;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_host(), output);
  }

  // optional uint32 compress_type = 4;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseHead)
}

::google::protobuf::uint8* ResponseHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseHead)
  // required sint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->code(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string from_host = 3;
  if (has_from_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), this->from_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_host(), target);
  }

  // optional uint32 compress_type = 4;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseHead)
  return target;
}

int ResponseHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseHead)
  int total_size = 0;

  // required sint32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->code());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string from_host = 3;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

    // optional uint32 compress_type = 4;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compress_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.ResponseHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.ResponseHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.ResponseHead)
    MergeFrom(*source);
  }
}

void ResponseHead::MergeFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_from_host()) {
      set_has_from_host();
      from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHead::CopyFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseHead::Swap(ResponseHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHead::InternalSwap(ResponseHead* other) {
  std::swap(code_, other->code_);
  text_.Swap(&other->text_);
  from_host_.Swap(&other->from_host_);
  std::swap(compress_type_, other->compress_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHead_descriptor_;
  metadata.reflection = ResponseHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHead

// required sint32 code = 1;
bool ResponseHead::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseHead::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseHead::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseHead::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 ResponseHead::code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.code)
  return code_;
}
 void ResponseHead::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.code)
}

// optional string text = 2;
bool ResponseHead::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseHead::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseHead::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseHead::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& ResponseHead::text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHead::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.text)
}
 void ResponseHead::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseHead.text)
}
 void ResponseHead::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseHead.text)
}
 ::std::string* ResponseHead::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseHead.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseHead::release_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseHead.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHead::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseHead.text)
}

// optional string from_host = 3;
bool ResponseHead::has_from_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseHead::set_has_from_host() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseHead::clear_has_from_host() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseHead::clear_from_host() {
  from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_host();
}
 const ::std::string& ResponseHead::from_host() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.from_host)
  return from_host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHead::set_from_host(const ::std::string& value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.from_host)
}
 void ResponseHead::set_from_host(const char* value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseHead.from_host)
}
 void ResponseHead::set_from_host(const char* value, size_t size) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseHead.from_host)
}
 ::std::string* ResponseHead::mutable_from_host() {
  set_has_from_host();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseHead.from_host)
  return from_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseHead::release_from_host() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseHead.from_host)
  clear_has_from_host();
  return from_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHead::set_allocated_from_host(::std::string* from_host) {
  if (from_host != NULL) {
    set_has_from_host();
  } else {
    clear_has_from_host();
  }
  from_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_host);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseHead.from_host)
}

// optional uint32 compress_type = 4;
bool ResponseHead::has_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponseHead::set_has_compress_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponseHead::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponseHead::clear_compress_type() {
  compress_type_ = 0u;
  clear_has_compress_type();
}
 ::google::protobuf::uint32 ResponseHead::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.compress_type)
  return compress_type_;
}
 void ResponseHead::set_compress_type(::google::protobuf::uint32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.compress_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseBody::kSerializedResponseFieldNumber;
const int ResponseBody::kVersionFieldNumber;
const int ResponseBody::kErrorFieldNumber;
const int ResponseBody::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBody::ResponseBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseBody)
}

void ResponseBody::InitAsDefaultInstance() {
}

ResponseBody::ResponseBody(const ResponseBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseBody)
}

void ResponseBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseBody)
  SharedDtor();
}

void ResponseBody::SharedDtor() {
  serialized_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBody_descriptor_;
}

const ResponseBody& ResponseBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto();
  return *default_instance_;
}

ResponseBody* ResponseBody::default_instance_ = NULL;

ResponseBody* ResponseBody::New(::google::protobuf::Arena* arena) const {
  ResponseBody* n = new ResponseBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseBody)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseBody, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseBody*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, error_);
    if (has_serialized_response()) {
      serialized_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseBody.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional int32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseBody)
  return false;
#undef DO_
}

void ResponseBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseBody)
  // optional bytes serialized_response = 1;
  if (has_serialized_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_response(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseBody.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  // required uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseBody)
}

::google::protobuf::uint8* ResponseBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseBody)
  // optional bytes serialized_response = 1;
  if (has_serialized_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_response(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseBody.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  // required uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseBody)
  return target;
}

int ResponseBody::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseBody)
  int total_size = 0;

  // required uint64 id = 4;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes serialized_response = 1;
    if (has_serialized_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_response());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.ResponseBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.ResponseBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.ResponseBody)
    MergeFrom(*source);
  }
}

void ResponseBody::MergeFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_response()) {
      set_has_serialized_response();
      serialized_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_response_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void ResponseBody::Swap(ResponseBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBody::InternalSwap(ResponseBody* other) {
  serialized_response_.Swap(&other->serialized_response_);
  version_.Swap(&other->version_);
  std::swap(error_, other->error_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBody_descriptor_;
  metadata.reflection = ResponseBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseBody

// optional bytes serialized_response = 1;
bool ResponseBody::has_serialized_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseBody::set_has_serialized_response() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseBody::clear_has_serialized_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseBody::clear_serialized_response() {
  serialized_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_response();
}
 const ::std::string& ResponseBody::serialized_response() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.serialized_response)
  return serialized_response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseBody::set_serialized_response(const ::std::string& value) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.serialized_response)
}
 void ResponseBody::set_serialized_response(const char* value) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseBody.serialized_response)
}
 void ResponseBody::set_serialized_response(const void* value, size_t size) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseBody.serialized_response)
}
 ::std::string* ResponseBody::mutable_serialized_response() {
  set_has_serialized_response();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseBody.serialized_response)
  return serialized_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseBody::release_serialized_response() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseBody.serialized_response)
  clear_has_serialized_response();
  return serialized_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseBody::set_allocated_serialized_response(::std::string* serialized_response) {
  if (serialized_response != NULL) {
    set_has_serialized_response();
  } else {
    clear_has_serialized_response();
  }
  serialized_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_response);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseBody.serialized_response)
}

// optional string version = 2;
bool ResponseBody::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseBody::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseBody::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseBody::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& ResponseBody::version() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseBody::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.version)
}
 void ResponseBody::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseBody.version)
}
 void ResponseBody::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseBody.version)
}
 ::std::string* ResponseBody::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseBody.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseBody::release_version() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseBody.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseBody::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseBody.version)
}

// optional int32 error = 3;
bool ResponseBody::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseBody::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseBody::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseBody::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::google::protobuf::int32 ResponseBody::error() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.error)
  return error_;
}
 void ResponseBody::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.error)
}

// required uint64 id = 4;
bool ResponseBody::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponseBody::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponseBody::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponseBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 ResponseBody::id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.id)
  return id_;
}
 void ResponseBody::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
