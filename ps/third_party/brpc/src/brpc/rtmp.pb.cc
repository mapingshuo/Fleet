// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/rtmp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/rtmp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* RtmpConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtmpConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtmpConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtmpConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtmpPlay2Options_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtmpPlay2Options_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtmpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtmpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtmpEmptyObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtmpEmptyObject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2frtmp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2frtmp_2eproto() {
  protobuf_AddDesc_brpc_2frtmp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/rtmp.proto");
  GOOGLE_CHECK(file != NULL);
  RtmpConnectRequest_descriptor_ = file->message_type(0);
  static const int RtmpConnectRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, flashver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, swfurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, tcurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, fpad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, audiocodecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, videocodecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, videofunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, pageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, objectencoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, stream_multiplexing_),
  };
  RtmpConnectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtmpConnectRequest_descriptor_,
      RtmpConnectRequest::default_instance_,
      RtmpConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtmpConnectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectRequest, _internal_metadata_),
      -1);
  RtmpConnectResponse_descriptor_ = file->message_type(1);
  static const int RtmpConnectResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, fmsver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, create_stream_with_play_or_publish_),
  };
  RtmpConnectResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtmpConnectResponse_descriptor_,
      RtmpConnectResponse::default_instance_,
      RtmpConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtmpConnectResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpConnectResponse, _internal_metadata_),
      -1);
  RtmpPlay2Options_descriptor_ = file->message_type(2);
  static const int RtmpPlay2Options_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, oldstreamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, streamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, transition_),
  };
  RtmpPlay2Options_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtmpPlay2Options_descriptor_,
      RtmpPlay2Options::default_instance_,
      RtmpPlay2Options_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtmpPlay2Options),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpPlay2Options, _internal_metadata_),
      -1);
  RtmpInfo_descriptor_ = file->message_type(3);
  static const int RtmpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, objectencoding_),
  };
  RtmpInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtmpInfo_descriptor_,
      RtmpInfo::default_instance_,
      RtmpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtmpInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpInfo, _internal_metadata_),
      -1);
  RtmpEmptyObject_descriptor_ = file->message_type(4);
  static const int RtmpEmptyObject_offsets_[1] = {
  };
  RtmpEmptyObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RtmpEmptyObject_descriptor_,
      RtmpEmptyObject::default_instance_,
      RtmpEmptyObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpEmptyObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(RtmpEmptyObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtmpEmptyObject, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2frtmp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtmpConnectRequest_descriptor_, &RtmpConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtmpConnectResponse_descriptor_, &RtmpConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtmpPlay2Options_descriptor_, &RtmpPlay2Options::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtmpInfo_descriptor_, &RtmpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RtmpEmptyObject_descriptor_, &RtmpEmptyObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2frtmp_2eproto() {
  delete RtmpConnectRequest::default_instance_;
  delete RtmpConnectRequest_reflection_;
  delete RtmpConnectResponse::default_instance_;
  delete RtmpConnectResponse_reflection_;
  delete RtmpPlay2Options::default_instance_;
  delete RtmpPlay2Options_reflection_;
  delete RtmpInfo::default_instance_;
  delete RtmpInfo_reflection_;
  delete RtmpEmptyObject::default_instance_;
  delete RtmpEmptyObject_reflection_;
}

void protobuf_AddDesc_brpc_2frtmp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2frtmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017brpc/rtmp.proto\022\004brpc\"\375\001\n\022RtmpConnectR"
    "equest\022\013\n\003app\030\001 \001(\t\022\020\n\010flashVer\030\002 \001(\t\022\016\n"
    "\006swfUrl\030\003 \001(\t\022\r\n\005tcUrl\030\004 \001(\t\022\014\n\004fpad\030\005 \001"
    "(\010\022\024\n\014capabilities\030\006 \001(\001\022\023\n\013audioCodecs\030"
    "\007 \001(\001\022\023\n\013videoCodecs\030\010 \001(\001\022\025\n\rvideoFunct"
    "ion\030\t \001(\001\022\017\n\007pageUrl\030\n \001(\t\022\026\n\016objectEnco"
    "ding\030\013 \001(\001\022\033\n\023stream_multiplexing\030\014 \001(\010\""
    "u\n\023RtmpConnectResponse\022\016\n\006fmsVer\030\001 \001(\t\022\024"
    "\n\014capabilities\030\002 \001(\001\022\014\n\004mode\030\003 \001(\001\022*\n\"cr"
    "eate_stream_with_play_or_publish\030\004 \001(\010\"}"
    "\n\020RtmpPlay2Options\022\013\n\003len\030\001 \001(\001\022\016\n\006offse"
    "t\030\002 \001(\001\022\025\n\roldStreamName\030\003 \001(\t\022\r\n\005start\030"
    "\004 \001(\001\022\022\n\nstreamName\030\005 \001(\t\022\022\n\ntransition\030"
    "\006 \001(\t\"T\n\010RtmpInfo\022\014\n\004code\030\001 \001(\t\022\r\n\005level"
    "\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\026\n\016objectEnc"
    "oding\030\004 \001(\001\"\021\n\017RtmpEmptyObject", 630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/rtmp.proto", &protobuf_RegisterTypes);
  RtmpConnectRequest::default_instance_ = new RtmpConnectRequest();
  RtmpConnectResponse::default_instance_ = new RtmpConnectResponse();
  RtmpPlay2Options::default_instance_ = new RtmpPlay2Options();
  RtmpInfo::default_instance_ = new RtmpInfo();
  RtmpEmptyObject::default_instance_ = new RtmpEmptyObject();
  RtmpConnectRequest::default_instance_->InitAsDefaultInstance();
  RtmpConnectResponse::default_instance_->InitAsDefaultInstance();
  RtmpPlay2Options::default_instance_->InitAsDefaultInstance();
  RtmpInfo::default_instance_->InitAsDefaultInstance();
  RtmpEmptyObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2frtmp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2frtmp_2eproto {
  StaticDescriptorInitializer_brpc_2frtmp_2eproto() {
    protobuf_AddDesc_brpc_2frtmp_2eproto();
  }
} static_descriptor_initializer_brpc_2frtmp_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtmpConnectRequest::kAppFieldNumber;
const int RtmpConnectRequest::kFlashVerFieldNumber;
const int RtmpConnectRequest::kSwfUrlFieldNumber;
const int RtmpConnectRequest::kTcUrlFieldNumber;
const int RtmpConnectRequest::kFpadFieldNumber;
const int RtmpConnectRequest::kCapabilitiesFieldNumber;
const int RtmpConnectRequest::kAudioCodecsFieldNumber;
const int RtmpConnectRequest::kVideoCodecsFieldNumber;
const int RtmpConnectRequest::kVideoFunctionFieldNumber;
const int RtmpConnectRequest::kPageUrlFieldNumber;
const int RtmpConnectRequest::kObjectEncodingFieldNumber;
const int RtmpConnectRequest::kStreamMultiplexingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtmpConnectRequest::RtmpConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RtmpConnectRequest)
}

void RtmpConnectRequest::InitAsDefaultInstance() {
}

RtmpConnectRequest::RtmpConnectRequest(const RtmpConnectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RtmpConnectRequest)
}

void RtmpConnectRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flashver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  swfurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fpad_ = false;
  capabilities_ = 0;
  audiocodecs_ = 0;
  videocodecs_ = 0;
  videofunction_ = 0;
  pageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectencoding_ = 0;
  stream_multiplexing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtmpConnectRequest::~RtmpConnectRequest() {
  // @@protoc_insertion_point(destructor:brpc.RtmpConnectRequest)
  SharedDtor();
}

void RtmpConnectRequest::SharedDtor() {
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flashver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  swfurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RtmpConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtmpConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtmpConnectRequest_descriptor_;
}

const RtmpConnectRequest& RtmpConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2frtmp_2eproto();
  return *default_instance_;
}

RtmpConnectRequest* RtmpConnectRequest::default_instance_ = NULL;

RtmpConnectRequest* RtmpConnectRequest::New(::google::protobuf::Arena* arena) const {
  RtmpConnectRequest* n = new RtmpConnectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtmpConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RtmpConnectRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RtmpConnectRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RtmpConnectRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(capabilities_, videocodecs_);
    if (has_app()) {
      app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_flashver()) {
      flashver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_swfurl()) {
      swfurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tcurl()) {
      tcurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    fpad_ = false;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    videofunction_ = 0;
    if (has_pageurl()) {
      pageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    objectencoding_ = 0;
    stream_multiplexing_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtmpConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RtmpConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app().data(), this->app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectRequest.app");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_flashVer;
        break;
      }

      // optional string flashVer = 2;
      case 2: {
        if (tag == 18) {
         parse_flashVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flashver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flashver().data(), this->flashver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectRequest.flashVer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_swfUrl;
        break;
      }

      // optional string swfUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_swfUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_swfurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->swfurl().data(), this->swfurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectRequest.swfUrl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tcUrl;
        break;
      }

      // optional string tcUrl = 4;
      case 4: {
        if (tag == 34) {
         parse_tcUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcurl().data(), this->tcurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectRequest.tcUrl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fpad;
        break;
      }

      // optional bool fpad = 5;
      case 5: {
        if (tag == 40) {
         parse_fpad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fpad_)));
          set_has_fpad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_capabilities;
        break;
      }

      // optional double capabilities = 6;
      case 6: {
        if (tag == 49) {
         parse_capabilities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &capabilities_)));
          set_has_capabilities();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_audioCodecs;
        break;
      }

      // optional double audioCodecs = 7;
      case 7: {
        if (tag == 57) {
         parse_audioCodecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &audiocodecs_)));
          set_has_audiocodecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_videoCodecs;
        break;
      }

      // optional double videoCodecs = 8;
      case 8: {
        if (tag == 65) {
         parse_videoCodecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &videocodecs_)));
          set_has_videocodecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_videoFunction;
        break;
      }

      // optional double videoFunction = 9;
      case 9: {
        if (tag == 73) {
         parse_videoFunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &videofunction_)));
          set_has_videofunction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pageUrl;
        break;
      }

      // optional string pageUrl = 10;
      case 10: {
        if (tag == 82) {
         parse_pageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurl().data(), this->pageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectRequest.pageUrl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_objectEncoding;
        break;
      }

      // optional double objectEncoding = 11;
      case 11: {
        if (tag == 89) {
         parse_objectEncoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objectencoding_)));
          set_has_objectencoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stream_multiplexing;
        break;
      }

      // optional bool stream_multiplexing = 12;
      case 12: {
        if (tag == 96) {
         parse_stream_multiplexing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_multiplexing_)));
          set_has_stream_multiplexing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RtmpConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RtmpConnectRequest)
  return false;
#undef DO_
}

void RtmpConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RtmpConnectRequest)
  // optional string app = 1;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app(), output);
  }

  // optional string flashVer = 2;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.flashVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->flashver(), output);
  }

  // optional string swfUrl = 3;
  if (has_swfurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->swfurl().data(), this->swfurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.swfUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->swfurl(), output);
  }

  // optional string tcUrl = 4;
  if (has_tcurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcurl().data(), this->tcurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.tcUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tcurl(), output);
  }

  // optional bool fpad = 5;
  if (has_fpad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fpad(), output);
  }

  // optional double capabilities = 6;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->capabilities(), output);
  }

  // optional double audioCodecs = 7;
  if (has_audiocodecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->audiocodecs(), output);
  }

  // optional double videoCodecs = 8;
  if (has_videocodecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->videocodecs(), output);
  }

  // optional double videoFunction = 9;
  if (has_videofunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->videofunction(), output);
  }

  // optional string pageUrl = 10;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.pageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pageurl(), output);
  }

  // optional double objectEncoding = 11;
  if (has_objectencoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->objectencoding(), output);
  }

  // optional bool stream_multiplexing = 12;
  if (has_stream_multiplexing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->stream_multiplexing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RtmpConnectRequest)
}

::google::protobuf::uint8* RtmpConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RtmpConnectRequest)
  // optional string app = 1;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app(), target);
  }

  // optional string flashVer = 2;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.flashVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flashver(), target);
  }

  // optional string swfUrl = 3;
  if (has_swfurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->swfurl().data(), this->swfurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.swfUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->swfurl(), target);
  }

  // optional string tcUrl = 4;
  if (has_tcurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcurl().data(), this->tcurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.tcUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tcurl(), target);
  }

  // optional bool fpad = 5;
  if (has_fpad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fpad(), target);
  }

  // optional double capabilities = 6;
  if (has_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->capabilities(), target);
  }

  // optional double audioCodecs = 7;
  if (has_audiocodecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->audiocodecs(), target);
  }

  // optional double videoCodecs = 8;
  if (has_videocodecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->videocodecs(), target);
  }

  // optional double videoFunction = 9;
  if (has_videofunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->videofunction(), target);
  }

  // optional string pageUrl = 10;
  if (has_pageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), this->pageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectRequest.pageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pageurl(), target);
  }

  // optional double objectEncoding = 11;
  if (has_objectencoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->objectencoding(), target);
  }

  // optional bool stream_multiplexing = 12;
  if (has_stream_multiplexing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->stream_multiplexing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RtmpConnectRequest)
  return target;
}

int RtmpConnectRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RtmpConnectRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string app = 1;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app());
    }

    // optional string flashVer = 2;
    if (has_flashver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flashver());
    }

    // optional string swfUrl = 3;
    if (has_swfurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->swfurl());
    }

    // optional string tcUrl = 4;
    if (has_tcurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcurl());
    }

    // optional bool fpad = 5;
    if (has_fpad()) {
      total_size += 1 + 1;
    }

    // optional double capabilities = 6;
    if (has_capabilities()) {
      total_size += 1 + 8;
    }

    // optional double audioCodecs = 7;
    if (has_audiocodecs()) {
      total_size += 1 + 8;
    }

    // optional double videoCodecs = 8;
    if (has_videocodecs()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double videoFunction = 9;
    if (has_videofunction()) {
      total_size += 1 + 8;
    }

    // optional string pageUrl = 10;
    if (has_pageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageurl());
    }

    // optional double objectEncoding = 11;
    if (has_objectencoding()) {
      total_size += 1 + 8;
    }

    // optional bool stream_multiplexing = 12;
    if (has_stream_multiplexing()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtmpConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RtmpConnectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtmpConnectRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtmpConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RtmpConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RtmpConnectRequest)
    MergeFrom(*source);
  }
}

void RtmpConnectRequest::MergeFrom(const RtmpConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RtmpConnectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app()) {
      set_has_app();
      app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
    }
    if (from.has_flashver()) {
      set_has_flashver();
      flashver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flashver_);
    }
    if (from.has_swfurl()) {
      set_has_swfurl();
      swfurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.swfurl_);
    }
    if (from.has_tcurl()) {
      set_has_tcurl();
      tcurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcurl_);
    }
    if (from.has_fpad()) {
      set_fpad(from.fpad());
    }
    if (from.has_capabilities()) {
      set_capabilities(from.capabilities());
    }
    if (from.has_audiocodecs()) {
      set_audiocodecs(from.audiocodecs());
    }
    if (from.has_videocodecs()) {
      set_videocodecs(from.videocodecs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_videofunction()) {
      set_videofunction(from.videofunction());
    }
    if (from.has_pageurl()) {
      set_has_pageurl();
      pageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pageurl_);
    }
    if (from.has_objectencoding()) {
      set_objectencoding(from.objectencoding());
    }
    if (from.has_stream_multiplexing()) {
      set_stream_multiplexing(from.stream_multiplexing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtmpConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RtmpConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtmpConnectRequest::CopyFrom(const RtmpConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RtmpConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtmpConnectRequest::IsInitialized() const {

  return true;
}

void RtmpConnectRequest::Swap(RtmpConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtmpConnectRequest::InternalSwap(RtmpConnectRequest* other) {
  app_.Swap(&other->app_);
  flashver_.Swap(&other->flashver_);
  swfurl_.Swap(&other->swfurl_);
  tcurl_.Swap(&other->tcurl_);
  std::swap(fpad_, other->fpad_);
  std::swap(capabilities_, other->capabilities_);
  std::swap(audiocodecs_, other->audiocodecs_);
  std::swap(videocodecs_, other->videocodecs_);
  std::swap(videofunction_, other->videofunction_);
  pageurl_.Swap(&other->pageurl_);
  std::swap(objectencoding_, other->objectencoding_);
  std::swap(stream_multiplexing_, other->stream_multiplexing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtmpConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtmpConnectRequest_descriptor_;
  metadata.reflection = RtmpConnectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtmpConnectRequest

// optional string app = 1;
bool RtmpConnectRequest::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtmpConnectRequest::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
void RtmpConnectRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtmpConnectRequest::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
 const ::std::string& RtmpConnectRequest::app() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.app)
  return app_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.app)
}
 void RtmpConnectRequest::set_app(const char* value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectRequest.app)
}
 void RtmpConnectRequest::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectRequest.app)
}
 ::std::string* RtmpConnectRequest::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectRequest.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectRequest::release_app() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectRequest.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectRequest.app)
}

// optional string flashVer = 2;
bool RtmpConnectRequest::has_flashver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtmpConnectRequest::set_has_flashver() {
  _has_bits_[0] |= 0x00000002u;
}
void RtmpConnectRequest::clear_has_flashver() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtmpConnectRequest::clear_flashver() {
  flashver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_flashver();
}
 const ::std::string& RtmpConnectRequest::flashver() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.flashVer)
  return flashver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_flashver(const ::std::string& value) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.flashVer)
}
 void RtmpConnectRequest::set_flashver(const char* value) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectRequest.flashVer)
}
 void RtmpConnectRequest::set_flashver(const char* value, size_t size) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectRequest.flashVer)
}
 ::std::string* RtmpConnectRequest::mutable_flashver() {
  set_has_flashver();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectRequest.flashVer)
  return flashver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectRequest::release_flashver() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectRequest.flashVer)
  clear_has_flashver();
  return flashver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_allocated_flashver(::std::string* flashver) {
  if (flashver != NULL) {
    set_has_flashver();
  } else {
    clear_has_flashver();
  }
  flashver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flashver);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectRequest.flashVer)
}

// optional string swfUrl = 3;
bool RtmpConnectRequest::has_swfurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtmpConnectRequest::set_has_swfurl() {
  _has_bits_[0] |= 0x00000004u;
}
void RtmpConnectRequest::clear_has_swfurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtmpConnectRequest::clear_swfurl() {
  swfurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_swfurl();
}
 const ::std::string& RtmpConnectRequest::swfurl() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.swfUrl)
  return swfurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_swfurl(const ::std::string& value) {
  set_has_swfurl();
  swfurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.swfUrl)
}
 void RtmpConnectRequest::set_swfurl(const char* value) {
  set_has_swfurl();
  swfurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectRequest.swfUrl)
}
 void RtmpConnectRequest::set_swfurl(const char* value, size_t size) {
  set_has_swfurl();
  swfurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectRequest.swfUrl)
}
 ::std::string* RtmpConnectRequest::mutable_swfurl() {
  set_has_swfurl();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectRequest.swfUrl)
  return swfurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectRequest::release_swfurl() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectRequest.swfUrl)
  clear_has_swfurl();
  return swfurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_allocated_swfurl(::std::string* swfurl) {
  if (swfurl != NULL) {
    set_has_swfurl();
  } else {
    clear_has_swfurl();
  }
  swfurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), swfurl);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectRequest.swfUrl)
}

// optional string tcUrl = 4;
bool RtmpConnectRequest::has_tcurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtmpConnectRequest::set_has_tcurl() {
  _has_bits_[0] |= 0x00000008u;
}
void RtmpConnectRequest::clear_has_tcurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtmpConnectRequest::clear_tcurl() {
  tcurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcurl();
}
 const ::std::string& RtmpConnectRequest::tcurl() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.tcUrl)
  return tcurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_tcurl(const ::std::string& value) {
  set_has_tcurl();
  tcurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.tcUrl)
}
 void RtmpConnectRequest::set_tcurl(const char* value) {
  set_has_tcurl();
  tcurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectRequest.tcUrl)
}
 void RtmpConnectRequest::set_tcurl(const char* value, size_t size) {
  set_has_tcurl();
  tcurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectRequest.tcUrl)
}
 ::std::string* RtmpConnectRequest::mutable_tcurl() {
  set_has_tcurl();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectRequest.tcUrl)
  return tcurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectRequest::release_tcurl() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectRequest.tcUrl)
  clear_has_tcurl();
  return tcurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_allocated_tcurl(::std::string* tcurl) {
  if (tcurl != NULL) {
    set_has_tcurl();
  } else {
    clear_has_tcurl();
  }
  tcurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcurl);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectRequest.tcUrl)
}

// optional bool fpad = 5;
bool RtmpConnectRequest::has_fpad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RtmpConnectRequest::set_has_fpad() {
  _has_bits_[0] |= 0x00000010u;
}
void RtmpConnectRequest::clear_has_fpad() {
  _has_bits_[0] &= ~0x00000010u;
}
void RtmpConnectRequest::clear_fpad() {
  fpad_ = false;
  clear_has_fpad();
}
 bool RtmpConnectRequest::fpad() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.fpad)
  return fpad_;
}
 void RtmpConnectRequest::set_fpad(bool value) {
  set_has_fpad();
  fpad_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.fpad)
}

// optional double capabilities = 6;
bool RtmpConnectRequest::has_capabilities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RtmpConnectRequest::set_has_capabilities() {
  _has_bits_[0] |= 0x00000020u;
}
void RtmpConnectRequest::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000020u;
}
void RtmpConnectRequest::clear_capabilities() {
  capabilities_ = 0;
  clear_has_capabilities();
}
 double RtmpConnectRequest::capabilities() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.capabilities)
  return capabilities_;
}
 void RtmpConnectRequest::set_capabilities(double value) {
  set_has_capabilities();
  capabilities_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.capabilities)
}

// optional double audioCodecs = 7;
bool RtmpConnectRequest::has_audiocodecs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RtmpConnectRequest::set_has_audiocodecs() {
  _has_bits_[0] |= 0x00000040u;
}
void RtmpConnectRequest::clear_has_audiocodecs() {
  _has_bits_[0] &= ~0x00000040u;
}
void RtmpConnectRequest::clear_audiocodecs() {
  audiocodecs_ = 0;
  clear_has_audiocodecs();
}
 double RtmpConnectRequest::audiocodecs() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.audioCodecs)
  return audiocodecs_;
}
 void RtmpConnectRequest::set_audiocodecs(double value) {
  set_has_audiocodecs();
  audiocodecs_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.audioCodecs)
}

// optional double videoCodecs = 8;
bool RtmpConnectRequest::has_videocodecs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RtmpConnectRequest::set_has_videocodecs() {
  _has_bits_[0] |= 0x00000080u;
}
void RtmpConnectRequest::clear_has_videocodecs() {
  _has_bits_[0] &= ~0x00000080u;
}
void RtmpConnectRequest::clear_videocodecs() {
  videocodecs_ = 0;
  clear_has_videocodecs();
}
 double RtmpConnectRequest::videocodecs() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.videoCodecs)
  return videocodecs_;
}
 void RtmpConnectRequest::set_videocodecs(double value) {
  set_has_videocodecs();
  videocodecs_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.videoCodecs)
}

// optional double videoFunction = 9;
bool RtmpConnectRequest::has_videofunction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RtmpConnectRequest::set_has_videofunction() {
  _has_bits_[0] |= 0x00000100u;
}
void RtmpConnectRequest::clear_has_videofunction() {
  _has_bits_[0] &= ~0x00000100u;
}
void RtmpConnectRequest::clear_videofunction() {
  videofunction_ = 0;
  clear_has_videofunction();
}
 double RtmpConnectRequest::videofunction() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.videoFunction)
  return videofunction_;
}
 void RtmpConnectRequest::set_videofunction(double value) {
  set_has_videofunction();
  videofunction_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.videoFunction)
}

// optional string pageUrl = 10;
bool RtmpConnectRequest::has_pageurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RtmpConnectRequest::set_has_pageurl() {
  _has_bits_[0] |= 0x00000200u;
}
void RtmpConnectRequest::clear_has_pageurl() {
  _has_bits_[0] &= ~0x00000200u;
}
void RtmpConnectRequest::clear_pageurl() {
  pageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pageurl();
}
 const ::std::string& RtmpConnectRequest::pageurl() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.pageUrl)
  return pageurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_pageurl(const ::std::string& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.pageUrl)
}
 void RtmpConnectRequest::set_pageurl(const char* value) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectRequest.pageUrl)
}
 void RtmpConnectRequest::set_pageurl(const char* value, size_t size) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectRequest.pageUrl)
}
 ::std::string* RtmpConnectRequest::mutable_pageurl() {
  set_has_pageurl();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectRequest.pageUrl)
  return pageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectRequest::release_pageurl() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectRequest.pageUrl)
  clear_has_pageurl();
  return pageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectRequest::set_allocated_pageurl(::std::string* pageurl) {
  if (pageurl != NULL) {
    set_has_pageurl();
  } else {
    clear_has_pageurl();
  }
  pageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pageurl);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectRequest.pageUrl)
}

// optional double objectEncoding = 11;
bool RtmpConnectRequest::has_objectencoding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RtmpConnectRequest::set_has_objectencoding() {
  _has_bits_[0] |= 0x00000400u;
}
void RtmpConnectRequest::clear_has_objectencoding() {
  _has_bits_[0] &= ~0x00000400u;
}
void RtmpConnectRequest::clear_objectencoding() {
  objectencoding_ = 0;
  clear_has_objectencoding();
}
 double RtmpConnectRequest::objectencoding() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.objectEncoding)
  return objectencoding_;
}
 void RtmpConnectRequest::set_objectencoding(double value) {
  set_has_objectencoding();
  objectencoding_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.objectEncoding)
}

// optional bool stream_multiplexing = 12;
bool RtmpConnectRequest::has_stream_multiplexing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RtmpConnectRequest::set_has_stream_multiplexing() {
  _has_bits_[0] |= 0x00000800u;
}
void RtmpConnectRequest::clear_has_stream_multiplexing() {
  _has_bits_[0] &= ~0x00000800u;
}
void RtmpConnectRequest::clear_stream_multiplexing() {
  stream_multiplexing_ = false;
  clear_has_stream_multiplexing();
}
 bool RtmpConnectRequest::stream_multiplexing() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectRequest.stream_multiplexing)
  return stream_multiplexing_;
}
 void RtmpConnectRequest::set_stream_multiplexing(bool value) {
  set_has_stream_multiplexing();
  stream_multiplexing_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectRequest.stream_multiplexing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtmpConnectResponse::kFmsVerFieldNumber;
const int RtmpConnectResponse::kCapabilitiesFieldNumber;
const int RtmpConnectResponse::kModeFieldNumber;
const int RtmpConnectResponse::kCreateStreamWithPlayOrPublishFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtmpConnectResponse::RtmpConnectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RtmpConnectResponse)
}

void RtmpConnectResponse::InitAsDefaultInstance() {
}

RtmpConnectResponse::RtmpConnectResponse(const RtmpConnectResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RtmpConnectResponse)
}

void RtmpConnectResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fmsver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capabilities_ = 0;
  mode_ = 0;
  create_stream_with_play_or_publish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtmpConnectResponse::~RtmpConnectResponse() {
  // @@protoc_insertion_point(destructor:brpc.RtmpConnectResponse)
  SharedDtor();
}

void RtmpConnectResponse::SharedDtor() {
  fmsver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RtmpConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtmpConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtmpConnectResponse_descriptor_;
}

const RtmpConnectResponse& RtmpConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2frtmp_2eproto();
  return *default_instance_;
}

RtmpConnectResponse* RtmpConnectResponse::default_instance_ = NULL;

RtmpConnectResponse* RtmpConnectResponse::New(::google::protobuf::Arena* arena) const {
  RtmpConnectResponse* n = new RtmpConnectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtmpConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RtmpConnectResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RtmpConnectResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RtmpConnectResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(capabilities_, create_stream_with_play_or_publish_);
    if (has_fmsver()) {
      fmsver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtmpConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RtmpConnectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fmsVer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fmsver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fmsver().data(), this->fmsver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpConnectResponse.fmsVer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_capabilities;
        break;
      }

      // optional double capabilities = 2;
      case 2: {
        if (tag == 17) {
         parse_capabilities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &capabilities_)));
          set_has_capabilities();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_mode;
        break;
      }

      // optional double mode = 3;
      case 3: {
        if (tag == 25) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_stream_with_play_or_publish;
        break;
      }

      // optional bool create_stream_with_play_or_publish = 4;
      case 4: {
        if (tag == 32) {
         parse_create_stream_with_play_or_publish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_stream_with_play_or_publish_)));
          set_has_create_stream_with_play_or_publish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RtmpConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RtmpConnectResponse)
  return false;
#undef DO_
}

void RtmpConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RtmpConnectResponse)
  // optional string fmsVer = 1;
  if (has_fmsver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmsver().data(), this->fmsver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectResponse.fmsVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fmsver(), output);
  }

  // optional double capabilities = 2;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->capabilities(), output);
  }

  // optional double mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mode(), output);
  }

  // optional bool create_stream_with_play_or_publish = 4;
  if (has_create_stream_with_play_or_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->create_stream_with_play_or_publish(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RtmpConnectResponse)
}

::google::protobuf::uint8* RtmpConnectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RtmpConnectResponse)
  // optional string fmsVer = 1;
  if (has_fmsver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmsver().data(), this->fmsver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpConnectResponse.fmsVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fmsver(), target);
  }

  // optional double capabilities = 2;
  if (has_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->capabilities(), target);
  }

  // optional double mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mode(), target);
  }

  // optional bool create_stream_with_play_or_publish = 4;
  if (has_create_stream_with_play_or_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->create_stream_with_play_or_publish(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RtmpConnectResponse)
  return target;
}

int RtmpConnectResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RtmpConnectResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string fmsVer = 1;
    if (has_fmsver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fmsver());
    }

    // optional double capabilities = 2;
    if (has_capabilities()) {
      total_size += 1 + 8;
    }

    // optional double mode = 3;
    if (has_mode()) {
      total_size += 1 + 8;
    }

    // optional bool create_stream_with_play_or_publish = 4;
    if (has_create_stream_with_play_or_publish()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtmpConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RtmpConnectResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtmpConnectResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtmpConnectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RtmpConnectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RtmpConnectResponse)
    MergeFrom(*source);
  }
}

void RtmpConnectResponse::MergeFrom(const RtmpConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RtmpConnectResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmsver()) {
      set_has_fmsver();
      fmsver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fmsver_);
    }
    if (from.has_capabilities()) {
      set_capabilities(from.capabilities());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_create_stream_with_play_or_publish()) {
      set_create_stream_with_play_or_publish(from.create_stream_with_play_or_publish());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtmpConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RtmpConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtmpConnectResponse::CopyFrom(const RtmpConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RtmpConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtmpConnectResponse::IsInitialized() const {

  return true;
}

void RtmpConnectResponse::Swap(RtmpConnectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtmpConnectResponse::InternalSwap(RtmpConnectResponse* other) {
  fmsver_.Swap(&other->fmsver_);
  std::swap(capabilities_, other->capabilities_);
  std::swap(mode_, other->mode_);
  std::swap(create_stream_with_play_or_publish_, other->create_stream_with_play_or_publish_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtmpConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtmpConnectResponse_descriptor_;
  metadata.reflection = RtmpConnectResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtmpConnectResponse

// optional string fmsVer = 1;
bool RtmpConnectResponse::has_fmsver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtmpConnectResponse::set_has_fmsver() {
  _has_bits_[0] |= 0x00000001u;
}
void RtmpConnectResponse::clear_has_fmsver() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtmpConnectResponse::clear_fmsver() {
  fmsver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fmsver();
}
 const ::std::string& RtmpConnectResponse::fmsver() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectResponse.fmsVer)
  return fmsver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectResponse::set_fmsver(const ::std::string& value) {
  set_has_fmsver();
  fmsver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectResponse.fmsVer)
}
 void RtmpConnectResponse::set_fmsver(const char* value) {
  set_has_fmsver();
  fmsver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpConnectResponse.fmsVer)
}
 void RtmpConnectResponse::set_fmsver(const char* value, size_t size) {
  set_has_fmsver();
  fmsver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpConnectResponse.fmsVer)
}
 ::std::string* RtmpConnectResponse::mutable_fmsver() {
  set_has_fmsver();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpConnectResponse.fmsVer)
  return fmsver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpConnectResponse::release_fmsver() {
  // @@protoc_insertion_point(field_release:brpc.RtmpConnectResponse.fmsVer)
  clear_has_fmsver();
  return fmsver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpConnectResponse::set_allocated_fmsver(::std::string* fmsver) {
  if (fmsver != NULL) {
    set_has_fmsver();
  } else {
    clear_has_fmsver();
  }
  fmsver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fmsver);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpConnectResponse.fmsVer)
}

// optional double capabilities = 2;
bool RtmpConnectResponse::has_capabilities() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtmpConnectResponse::set_has_capabilities() {
  _has_bits_[0] |= 0x00000002u;
}
void RtmpConnectResponse::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtmpConnectResponse::clear_capabilities() {
  capabilities_ = 0;
  clear_has_capabilities();
}
 double RtmpConnectResponse::capabilities() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectResponse.capabilities)
  return capabilities_;
}
 void RtmpConnectResponse::set_capabilities(double value) {
  set_has_capabilities();
  capabilities_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectResponse.capabilities)
}

// optional double mode = 3;
bool RtmpConnectResponse::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtmpConnectResponse::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void RtmpConnectResponse::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtmpConnectResponse::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 double RtmpConnectResponse::mode() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectResponse.mode)
  return mode_;
}
 void RtmpConnectResponse::set_mode(double value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectResponse.mode)
}

// optional bool create_stream_with_play_or_publish = 4;
bool RtmpConnectResponse::has_create_stream_with_play_or_publish() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtmpConnectResponse::set_has_create_stream_with_play_or_publish() {
  _has_bits_[0] |= 0x00000008u;
}
void RtmpConnectResponse::clear_has_create_stream_with_play_or_publish() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtmpConnectResponse::clear_create_stream_with_play_or_publish() {
  create_stream_with_play_or_publish_ = false;
  clear_has_create_stream_with_play_or_publish();
}
 bool RtmpConnectResponse::create_stream_with_play_or_publish() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpConnectResponse.create_stream_with_play_or_publish)
  return create_stream_with_play_or_publish_;
}
 void RtmpConnectResponse::set_create_stream_with_play_or_publish(bool value) {
  set_has_create_stream_with_play_or_publish();
  create_stream_with_play_or_publish_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpConnectResponse.create_stream_with_play_or_publish)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtmpPlay2Options::kLenFieldNumber;
const int RtmpPlay2Options::kOffsetFieldNumber;
const int RtmpPlay2Options::kOldStreamNameFieldNumber;
const int RtmpPlay2Options::kStartFieldNumber;
const int RtmpPlay2Options::kStreamNameFieldNumber;
const int RtmpPlay2Options::kTransitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtmpPlay2Options::RtmpPlay2Options()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RtmpPlay2Options)
}

void RtmpPlay2Options::InitAsDefaultInstance() {
}

RtmpPlay2Options::RtmpPlay2Options(const RtmpPlay2Options& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RtmpPlay2Options)
}

void RtmpPlay2Options::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  len_ = 0;
  offset_ = 0;
  oldstreamname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = 0;
  streamname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtmpPlay2Options::~RtmpPlay2Options() {
  // @@protoc_insertion_point(destructor:brpc.RtmpPlay2Options)
  SharedDtor();
}

void RtmpPlay2Options::SharedDtor() {
  oldstreamname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RtmpPlay2Options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtmpPlay2Options::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtmpPlay2Options_descriptor_;
}

const RtmpPlay2Options& RtmpPlay2Options::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2frtmp_2eproto();
  return *default_instance_;
}

RtmpPlay2Options* RtmpPlay2Options::default_instance_ = NULL;

RtmpPlay2Options* RtmpPlay2Options::New(::google::protobuf::Arena* arena) const {
  RtmpPlay2Options* n = new RtmpPlay2Options;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtmpPlay2Options::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RtmpPlay2Options)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RtmpPlay2Options, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RtmpPlay2Options*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(len_, offset_);
    if (has_oldstreamname()) {
      oldstreamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    start_ = 0;
    if (has_streamname()) {
      streamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_transition()) {
      transition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtmpPlay2Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RtmpPlay2Options)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double len = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }

      // optional double offset = 2;
      case 2: {
        if (tag == 17) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_oldStreamName;
        break;
      }

      // optional string oldStreamName = 3;
      case 3: {
        if (tag == 26) {
         parse_oldStreamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldstreamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldstreamname().data(), this->oldstreamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpPlay2Options.oldStreamName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_start;
        break;
      }

      // optional double start = 4;
      case 4: {
        if (tag == 33) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_streamName;
        break;
      }

      // optional string streamName = 5;
      case 5: {
        if (tag == 42) {
         parse_streamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->streamname().data(), this->streamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpPlay2Options.streamName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transition;
        break;
      }

      // optional string transition = 6;
      case 6: {
        if (tag == 50) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transition().data(), this->transition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpPlay2Options.transition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RtmpPlay2Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RtmpPlay2Options)
  return false;
#undef DO_
}

void RtmpPlay2Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RtmpPlay2Options)
  // optional double len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->len(), output);
  }

  // optional double offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->offset(), output);
  }

  // optional string oldStreamName = 3;
  if (has_oldstreamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldstreamname().data(), this->oldstreamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.oldStreamName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->oldstreamname(), output);
  }

  // optional double start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start(), output);
  }

  // optional string streamName = 5;
  if (has_streamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamname().data(), this->streamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.streamName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->streamname(), output);
  }

  // optional string transition = 6;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transition().data(), this->transition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.transition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->transition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RtmpPlay2Options)
}

::google::protobuf::uint8* RtmpPlay2Options::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RtmpPlay2Options)
  // optional double len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->len(), target);
  }

  // optional double offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->offset(), target);
  }

  // optional string oldStreamName = 3;
  if (has_oldstreamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldstreamname().data(), this->oldstreamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.oldStreamName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldstreamname(), target);
  }

  // optional double start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start(), target);
  }

  // optional string streamName = 5;
  if (has_streamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->streamname().data(), this->streamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.streamName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->streamname(), target);
  }

  // optional string transition = 6;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transition().data(), this->transition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpPlay2Options.transition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->transition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RtmpPlay2Options)
  return target;
}

int RtmpPlay2Options::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RtmpPlay2Options)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double len = 1;
    if (has_len()) {
      total_size += 1 + 8;
    }

    // optional double offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }

    // optional string oldStreamName = 3;
    if (has_oldstreamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldstreamname());
    }

    // optional double start = 4;
    if (has_start()) {
      total_size += 1 + 8;
    }

    // optional string streamName = 5;
    if (has_streamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamname());
    }

    // optional string transition = 6;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transition());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtmpPlay2Options::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RtmpPlay2Options)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtmpPlay2Options* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtmpPlay2Options>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RtmpPlay2Options)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RtmpPlay2Options)
    MergeFrom(*source);
  }
}

void RtmpPlay2Options::MergeFrom(const RtmpPlay2Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RtmpPlay2Options)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_oldstreamname()) {
      set_has_oldstreamname();
      oldstreamname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oldstreamname_);
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_streamname()) {
      set_has_streamname();
      streamname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamname_);
    }
    if (from.has_transition()) {
      set_has_transition();
      transition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transition_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtmpPlay2Options::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RtmpPlay2Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtmpPlay2Options::CopyFrom(const RtmpPlay2Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RtmpPlay2Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtmpPlay2Options::IsInitialized() const {

  return true;
}

void RtmpPlay2Options::Swap(RtmpPlay2Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtmpPlay2Options::InternalSwap(RtmpPlay2Options* other) {
  std::swap(len_, other->len_);
  std::swap(offset_, other->offset_);
  oldstreamname_.Swap(&other->oldstreamname_);
  std::swap(start_, other->start_);
  streamname_.Swap(&other->streamname_);
  transition_.Swap(&other->transition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtmpPlay2Options::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtmpPlay2Options_descriptor_;
  metadata.reflection = RtmpPlay2Options_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtmpPlay2Options

// optional double len = 1;
bool RtmpPlay2Options::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtmpPlay2Options::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
void RtmpPlay2Options::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtmpPlay2Options::clear_len() {
  len_ = 0;
  clear_has_len();
}
 double RtmpPlay2Options::len() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.len)
  return len_;
}
 void RtmpPlay2Options::set_len(double value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.len)
}

// optional double offset = 2;
bool RtmpPlay2Options::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtmpPlay2Options::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void RtmpPlay2Options::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtmpPlay2Options::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 double RtmpPlay2Options::offset() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.offset)
  return offset_;
}
 void RtmpPlay2Options::set_offset(double value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.offset)
}

// optional string oldStreamName = 3;
bool RtmpPlay2Options::has_oldstreamname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtmpPlay2Options::set_has_oldstreamname() {
  _has_bits_[0] |= 0x00000004u;
}
void RtmpPlay2Options::clear_has_oldstreamname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtmpPlay2Options::clear_oldstreamname() {
  oldstreamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oldstreamname();
}
 const ::std::string& RtmpPlay2Options::oldstreamname() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.oldStreamName)
  return oldstreamname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_oldstreamname(const ::std::string& value) {
  set_has_oldstreamname();
  oldstreamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.oldStreamName)
}
 void RtmpPlay2Options::set_oldstreamname(const char* value) {
  set_has_oldstreamname();
  oldstreamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpPlay2Options.oldStreamName)
}
 void RtmpPlay2Options::set_oldstreamname(const char* value, size_t size) {
  set_has_oldstreamname();
  oldstreamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpPlay2Options.oldStreamName)
}
 ::std::string* RtmpPlay2Options::mutable_oldstreamname() {
  set_has_oldstreamname();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpPlay2Options.oldStreamName)
  return oldstreamname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpPlay2Options::release_oldstreamname() {
  // @@protoc_insertion_point(field_release:brpc.RtmpPlay2Options.oldStreamName)
  clear_has_oldstreamname();
  return oldstreamname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_allocated_oldstreamname(::std::string* oldstreamname) {
  if (oldstreamname != NULL) {
    set_has_oldstreamname();
  } else {
    clear_has_oldstreamname();
  }
  oldstreamname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oldstreamname);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpPlay2Options.oldStreamName)
}

// optional double start = 4;
bool RtmpPlay2Options::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtmpPlay2Options::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
void RtmpPlay2Options::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtmpPlay2Options::clear_start() {
  start_ = 0;
  clear_has_start();
}
 double RtmpPlay2Options::start() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.start)
  return start_;
}
 void RtmpPlay2Options::set_start(double value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.start)
}

// optional string streamName = 5;
bool RtmpPlay2Options::has_streamname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RtmpPlay2Options::set_has_streamname() {
  _has_bits_[0] |= 0x00000010u;
}
void RtmpPlay2Options::clear_has_streamname() {
  _has_bits_[0] &= ~0x00000010u;
}
void RtmpPlay2Options::clear_streamname() {
  streamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_streamname();
}
 const ::std::string& RtmpPlay2Options::streamname() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.streamName)
  return streamname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_streamname(const ::std::string& value) {
  set_has_streamname();
  streamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.streamName)
}
 void RtmpPlay2Options::set_streamname(const char* value) {
  set_has_streamname();
  streamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpPlay2Options.streamName)
}
 void RtmpPlay2Options::set_streamname(const char* value, size_t size) {
  set_has_streamname();
  streamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpPlay2Options.streamName)
}
 ::std::string* RtmpPlay2Options::mutable_streamname() {
  set_has_streamname();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpPlay2Options.streamName)
  return streamname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpPlay2Options::release_streamname() {
  // @@protoc_insertion_point(field_release:brpc.RtmpPlay2Options.streamName)
  clear_has_streamname();
  return streamname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_allocated_streamname(::std::string* streamname) {
  if (streamname != NULL) {
    set_has_streamname();
  } else {
    clear_has_streamname();
  }
  streamname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamname);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpPlay2Options.streamName)
}

// optional string transition = 6;
bool RtmpPlay2Options::has_transition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RtmpPlay2Options::set_has_transition() {
  _has_bits_[0] |= 0x00000020u;
}
void RtmpPlay2Options::clear_has_transition() {
  _has_bits_[0] &= ~0x00000020u;
}
void RtmpPlay2Options::clear_transition() {
  transition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transition();
}
 const ::std::string& RtmpPlay2Options::transition() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpPlay2Options.transition)
  return transition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_transition(const ::std::string& value) {
  set_has_transition();
  transition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpPlay2Options.transition)
}
 void RtmpPlay2Options::set_transition(const char* value) {
  set_has_transition();
  transition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpPlay2Options.transition)
}
 void RtmpPlay2Options::set_transition(const char* value, size_t size) {
  set_has_transition();
  transition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpPlay2Options.transition)
}
 ::std::string* RtmpPlay2Options::mutable_transition() {
  set_has_transition();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpPlay2Options.transition)
  return transition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpPlay2Options::release_transition() {
  // @@protoc_insertion_point(field_release:brpc.RtmpPlay2Options.transition)
  clear_has_transition();
  return transition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpPlay2Options::set_allocated_transition(::std::string* transition) {
  if (transition != NULL) {
    set_has_transition();
  } else {
    clear_has_transition();
  }
  transition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transition);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpPlay2Options.transition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtmpInfo::kCodeFieldNumber;
const int RtmpInfo::kLevelFieldNumber;
const int RtmpInfo::kDescriptionFieldNumber;
const int RtmpInfo::kObjectEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtmpInfo::RtmpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RtmpInfo)
}

void RtmpInfo::InitAsDefaultInstance() {
}

RtmpInfo::RtmpInfo(const RtmpInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RtmpInfo)
}

void RtmpInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectencoding_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtmpInfo::~RtmpInfo() {
  // @@protoc_insertion_point(destructor:brpc.RtmpInfo)
  SharedDtor();
}

void RtmpInfo::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RtmpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtmpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtmpInfo_descriptor_;
}

const RtmpInfo& RtmpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2frtmp_2eproto();
  return *default_instance_;
}

RtmpInfo* RtmpInfo::default_instance_ = NULL;

RtmpInfo* RtmpInfo::New(::google::protobuf::Arena* arena) const {
  RtmpInfo* n = new RtmpInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtmpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RtmpInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_level()) {
      level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    objectencoding_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtmpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RtmpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpInfo.code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_level;
        break;
      }

      // optional string level = 2;
      case 2: {
        if (tag == 18) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->level().data(), this->level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpInfo.level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.RtmpInfo.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_objectEncoding;
        break;
      }

      // optional double objectEncoding = 4;
      case 4: {
        if (tag == 33) {
         parse_objectEncoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objectencoding_)));
          set_has_objectencoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RtmpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RtmpInfo)
  return false;
#undef DO_
}

void RtmpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RtmpInfo)
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional string level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->level(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional double objectEncoding = 4;
  if (has_objectencoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->objectencoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RtmpInfo)
}

::google::protobuf::uint8* RtmpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RtmpInfo)
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.RtmpInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional double objectEncoding = 4;
  if (has_objectencoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->objectencoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RtmpInfo)
  return target;
}

int RtmpInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RtmpInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional double objectEncoding = 4;
    if (has_objectencoding()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtmpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RtmpInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtmpInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtmpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RtmpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RtmpInfo)
    MergeFrom(*source);
  }
}

void RtmpInfo::MergeFrom(const RtmpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RtmpInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_level()) {
      set_has_level();
      level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_objectencoding()) {
      set_objectencoding(from.objectencoding());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtmpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RtmpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtmpInfo::CopyFrom(const RtmpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RtmpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtmpInfo::IsInitialized() const {

  return true;
}

void RtmpInfo::Swap(RtmpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtmpInfo::InternalSwap(RtmpInfo* other) {
  code_.Swap(&other->code_);
  level_.Swap(&other->level_);
  description_.Swap(&other->description_);
  std::swap(objectencoding_, other->objectencoding_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtmpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtmpInfo_descriptor_;
  metadata.reflection = RtmpInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtmpInfo

// optional string code = 1;
bool RtmpInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtmpInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void RtmpInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtmpInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& RtmpInfo::code() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpInfo.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpInfo.code)
}
 void RtmpInfo::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpInfo.code)
}
 void RtmpInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpInfo.code)
}
 ::std::string* RtmpInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpInfo::release_code() {
  // @@protoc_insertion_point(field_release:brpc.RtmpInfo.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpInfo.code)
}

// optional string level = 2;
bool RtmpInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtmpInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void RtmpInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtmpInfo::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_level();
}
 const ::std::string& RtmpInfo::level() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpInfo.level)
  return level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_level(const ::std::string& value) {
  set_has_level();
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpInfo.level)
}
 void RtmpInfo::set_level(const char* value) {
  set_has_level();
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpInfo.level)
}
 void RtmpInfo::set_level(const char* value, size_t size) {
  set_has_level();
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpInfo.level)
}
 ::std::string* RtmpInfo::mutable_level() {
  set_has_level();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpInfo.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpInfo::release_level() {
  // @@protoc_insertion_point(field_release:brpc.RtmpInfo.level)
  clear_has_level();
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpInfo.level)
}

// optional string description = 3;
bool RtmpInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtmpInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void RtmpInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtmpInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& RtmpInfo::description() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.RtmpInfo.description)
}
 void RtmpInfo::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.RtmpInfo.description)
}
 void RtmpInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.RtmpInfo.description)
}
 ::std::string* RtmpInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:brpc.RtmpInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RtmpInfo::release_description() {
  // @@protoc_insertion_point(field_release:brpc.RtmpInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RtmpInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:brpc.RtmpInfo.description)
}

// optional double objectEncoding = 4;
bool RtmpInfo::has_objectencoding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtmpInfo::set_has_objectencoding() {
  _has_bits_[0] |= 0x00000008u;
}
void RtmpInfo::clear_has_objectencoding() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtmpInfo::clear_objectencoding() {
  objectencoding_ = 0;
  clear_has_objectencoding();
}
 double RtmpInfo::objectencoding() const {
  // @@protoc_insertion_point(field_get:brpc.RtmpInfo.objectEncoding)
  return objectencoding_;
}
 void RtmpInfo::set_objectencoding(double value) {
  set_has_objectencoding();
  objectencoding_ = value;
  // @@protoc_insertion_point(field_set:brpc.RtmpInfo.objectEncoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtmpEmptyObject::RtmpEmptyObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RtmpEmptyObject)
}

void RtmpEmptyObject::InitAsDefaultInstance() {
}

RtmpEmptyObject::RtmpEmptyObject(const RtmpEmptyObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.RtmpEmptyObject)
}

void RtmpEmptyObject::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtmpEmptyObject::~RtmpEmptyObject() {
  // @@protoc_insertion_point(destructor:brpc.RtmpEmptyObject)
  SharedDtor();
}

void RtmpEmptyObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtmpEmptyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtmpEmptyObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtmpEmptyObject_descriptor_;
}

const RtmpEmptyObject& RtmpEmptyObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2frtmp_2eproto();
  return *default_instance_;
}

RtmpEmptyObject* RtmpEmptyObject::default_instance_ = NULL;

RtmpEmptyObject* RtmpEmptyObject::New(::google::protobuf::Arena* arena) const {
  RtmpEmptyObject* n = new RtmpEmptyObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtmpEmptyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RtmpEmptyObject)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RtmpEmptyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RtmpEmptyObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RtmpEmptyObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RtmpEmptyObject)
  return false;
#undef DO_
}

void RtmpEmptyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RtmpEmptyObject)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RtmpEmptyObject)
}

::google::protobuf::uint8* RtmpEmptyObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RtmpEmptyObject)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RtmpEmptyObject)
  return target;
}

int RtmpEmptyObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RtmpEmptyObject)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtmpEmptyObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RtmpEmptyObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RtmpEmptyObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RtmpEmptyObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RtmpEmptyObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RtmpEmptyObject)
    MergeFrom(*source);
  }
}

void RtmpEmptyObject::MergeFrom(const RtmpEmptyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RtmpEmptyObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RtmpEmptyObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RtmpEmptyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtmpEmptyObject::CopyFrom(const RtmpEmptyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RtmpEmptyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtmpEmptyObject::IsInitialized() const {

  return true;
}

void RtmpEmptyObject::Swap(RtmpEmptyObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtmpEmptyObject::InternalSwap(RtmpEmptyObject* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtmpEmptyObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtmpEmptyObject_descriptor_;
  metadata.reflection = RtmpEmptyObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtmpEmptyObject

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
