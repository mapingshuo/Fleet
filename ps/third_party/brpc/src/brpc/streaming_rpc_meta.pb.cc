// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/streaming_rpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/streaming_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* StreamSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamFrameMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamFrameMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feedback_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/streaming_rpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  StreamSettings_descriptor_ = file->message_type(0);
  static const int StreamSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, need_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, writable_),
  };
  StreamSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamSettings_descriptor_,
      StreamSettings::default_instance_,
      StreamSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, _internal_metadata_),
      -1);
  StreamFrameMeta_descriptor_ = file->message_type(1);
  static const int StreamFrameMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, source_stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, frame_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, has_continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, feedback_),
  };
  StreamFrameMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamFrameMeta_descriptor_,
      StreamFrameMeta::default_instance_,
      StreamFrameMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamFrameMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamFrameMeta, _internal_metadata_),
      -1);
  Feedback_descriptor_ = file->message_type(2);
  static const int Feedback_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, consumed_size_),
  };
  Feedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feedback_descriptor_,
      Feedback::default_instance_,
      Feedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _has_bits_[0]),
      -1,
      -1,
      sizeof(Feedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _internal_metadata_),
      -1);
  FrameType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamSettings_descriptor_, &StreamSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamFrameMeta_descriptor_, &StreamFrameMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feedback_descriptor_, &Feedback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fstreaming_5frpc_5fmeta_2eproto() {
  delete StreamSettings::default_instance_;
  delete StreamSettings_reflection_;
  delete StreamFrameMeta::default_instance_;
  delete StreamFrameMeta_reflection_;
  delete Feedback::default_instance_;
  delete Feedback_reflection_;
}

void protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035brpc/streaming_rpc_meta.proto\022\004brpc\032\022b"
    "rpc/options.proto\"Z\n\016StreamSettings\022\021\n\ts"
    "tream_id\030\001 \002(\003\022\034\n\rneed_feedback\030\002 \001(\010:\005f"
    "alse\022\027\n\010writable\030\003 \001(\010:\005false\"\237\001\n\017Stream"
    "FrameMeta\022\021\n\tstream_id\030\001 \002(\003\022\030\n\020source_s"
    "tream_id\030\002 \001(\003\022#\n\nframe_type\030\003 \001(\0162\017.brp"
    "c.FrameType\022\030\n\020has_continuation\030\004 \001(\010\022 \n"
    "\010feedback\030\005 \001(\0132\016.brpc.Feedback\"!\n\010Feedb"
    "ack\022\025\n\rconsumed_size\030\001 \001(\003*{\n\tFrameType\022"
    "\026\n\022FRAME_TYPE_UNKNOWN\020\000\022\022\n\016FRAME_TYPE_RS"
    "T\020\001\022\024\n\020FRAME_TYPE_CLOSE\020\002\022\023\n\017FRAME_TYPE_"
    "DATA\020\003\022\027\n\023FRAME_TYPE_FEEDBACK\020\004B\035\n\010com.b"
    "rpcB\021StreamingRpcProto", 502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/streaming_rpc_meta.proto", &protobuf_RegisterTypes);
  StreamSettings::default_instance_ = new StreamSettings();
  StreamFrameMeta::default_instance_ = new StreamFrameMeta();
  Feedback::default_instance_ = new Feedback();
  StreamSettings::default_instance_->InitAsDefaultInstance();
  StreamFrameMeta::default_instance_->InitAsDefaultInstance();
  Feedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fstreaming_5frpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fstreaming_5frpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fstreaming_5frpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fstreaming_5frpc_5fmeta_2eproto_;
const ::google::protobuf::EnumDescriptor* FrameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameType_descriptor_;
}
bool FrameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSettings::kStreamIdFieldNumber;
const int StreamSettings::kNeedFeedbackFieldNumber;
const int StreamSettings::kWritableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSettings::StreamSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.StreamSettings)
}

void StreamSettings::InitAsDefaultInstance() {
}

StreamSettings::StreamSettings(const StreamSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.StreamSettings)
}

void StreamSettings::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  need_feedback_ = false;
  writable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamSettings::~StreamSettings() {
  // @@protoc_insertion_point(destructor:brpc.StreamSettings)
  SharedDtor();
}

void StreamSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamSettings_descriptor_;
}

const StreamSettings& StreamSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

StreamSettings* StreamSettings::default_instance_ = NULL;

StreamSettings* StreamSettings::New(::google::protobuf::Arena* arena) const {
  StreamSettings* n = new StreamSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.StreamSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stream_id_, writable_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.StreamSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need_feedback;
        break;
      }

      // optional bool need_feedback = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_need_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_feedback_)));
          set_has_need_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_writable;
        break;
      }

      // optional bool writable = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_writable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writable_)));
          set_has_writable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.StreamSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.StreamSettings)
  return false;
#undef DO_
}

void StreamSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.StreamSettings)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // optional bool need_feedback = 2 [default = false];
  if (has_need_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->need_feedback(), output);
  }

  // optional bool writable = 3 [default = false];
  if (has_writable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->writable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.StreamSettings)
}

::google::protobuf::uint8* StreamSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.StreamSettings)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // optional bool need_feedback = 2 [default = false];
  if (has_need_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->need_feedback(), target);
  }

  // optional bool writable = 3 [default = false];
  if (has_writable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->writable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.StreamSettings)
  return target;
}

int StreamSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.StreamSettings)
  int total_size = 0;

  // required int64 stream_id = 1;
  if (has_stream_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional bool need_feedback = 2 [default = false];
    if (has_need_feedback()) {
      total_size += 1 + 1;
    }

    // optional bool writable = 3 [default = false];
    if (has_writable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.StreamSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.StreamSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.StreamSettings)
    MergeFrom(*source);
  }
}

void StreamSettings::MergeFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.StreamSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_need_feedback()) {
      set_need_feedback(from.need_feedback());
    }
    if (from.has_writable()) {
      set_writable(from.writable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSettings::CopyFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StreamSettings::Swap(StreamSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSettings::InternalSwap(StreamSettings* other) {
  std::swap(stream_id_, other->stream_id_);
  std::swap(need_feedback_, other->need_feedback_);
  std::swap(writable_, other->writable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamSettings_descriptor_;
  metadata.reflection = StreamSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSettings

// required int64 stream_id = 1;
bool StreamSettings::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamSettings::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamSettings::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamSettings::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
 ::google::protobuf::int64 StreamSettings::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.stream_id)
  return stream_id_;
}
 void StreamSettings::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.stream_id)
}

// optional bool need_feedback = 2 [default = false];
bool StreamSettings::has_need_feedback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamSettings::set_has_need_feedback() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamSettings::clear_has_need_feedback() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamSettings::clear_need_feedback() {
  need_feedback_ = false;
  clear_has_need_feedback();
}
 bool StreamSettings::need_feedback() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.need_feedback)
  return need_feedback_;
}
 void StreamSettings::set_need_feedback(bool value) {
  set_has_need_feedback();
  need_feedback_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.need_feedback)
}

// optional bool writable = 3 [default = false];
bool StreamSettings::has_writable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamSettings::set_has_writable() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamSettings::clear_has_writable() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamSettings::clear_writable() {
  writable_ = false;
  clear_has_writable();
}
 bool StreamSettings::writable() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.writable)
  return writable_;
}
 void StreamSettings::set_writable(bool value) {
  set_has_writable();
  writable_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.writable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamFrameMeta::kStreamIdFieldNumber;
const int StreamFrameMeta::kSourceStreamIdFieldNumber;
const int StreamFrameMeta::kFrameTypeFieldNumber;
const int StreamFrameMeta::kHasContinuationFieldNumber;
const int StreamFrameMeta::kFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamFrameMeta::StreamFrameMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.StreamFrameMeta)
}

void StreamFrameMeta::InitAsDefaultInstance() {
  feedback_ = const_cast< ::brpc::Feedback*>(&::brpc::Feedback::default_instance());
}

StreamFrameMeta::StreamFrameMeta(const StreamFrameMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.StreamFrameMeta)
}

void StreamFrameMeta::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_LONGLONG(0);
  source_stream_id_ = GOOGLE_LONGLONG(0);
  frame_type_ = 0;
  has_continuation_ = false;
  feedback_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamFrameMeta::~StreamFrameMeta() {
  // @@protoc_insertion_point(destructor:brpc.StreamFrameMeta)
  SharedDtor();
}

void StreamFrameMeta::SharedDtor() {
  if (this != default_instance_) {
    delete feedback_;
  }
}

void StreamFrameMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamFrameMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamFrameMeta_descriptor_;
}

const StreamFrameMeta& StreamFrameMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

StreamFrameMeta* StreamFrameMeta::default_instance_ = NULL;

StreamFrameMeta* StreamFrameMeta::New(::google::protobuf::Arena* arena) const {
  StreamFrameMeta* n = new StreamFrameMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamFrameMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.StreamFrameMeta)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamFrameMeta, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamFrameMeta*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(stream_id_, has_continuation_);
    if (has_feedback()) {
      if (feedback_ != NULL) feedback_->::brpc::Feedback::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamFrameMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.StreamFrameMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_stream_id;
        break;
      }

      // optional int64 source_stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_source_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_stream_id_)));
          set_has_source_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame_type;
        break;
      }

      // optional .brpc.FrameType frame_type = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::FrameType_IsValid(value)) {
            set_frame_type(static_cast< ::brpc::FrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_continuation;
        break;
      }

      // optional bool has_continuation = 4;
      case 4: {
        if (tag == 32) {
         parse_has_continuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_continuation_)));
          set_has_has_continuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_feedback;
        break;
      }

      // optional .brpc.Feedback feedback = 5;
      case 5: {
        if (tag == 42) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.StreamFrameMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.StreamFrameMeta)
  return false;
#undef DO_
}

void StreamFrameMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.StreamFrameMeta)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // optional int64 source_stream_id = 2;
  if (has_source_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->source_stream_id(), output);
  }

  // optional .brpc.FrameType frame_type = 3;
  if (has_frame_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->frame_type(), output);
  }

  // optional bool has_continuation = 4;
  if (has_has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_continuation(), output);
  }

  // optional .brpc.Feedback feedback = 5;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->feedback_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.StreamFrameMeta)
}

::google::protobuf::uint8* StreamFrameMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.StreamFrameMeta)
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // optional int64 source_stream_id = 2;
  if (has_source_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->source_stream_id(), target);
  }

  // optional .brpc.FrameType frame_type = 3;
  if (has_frame_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->frame_type(), target);
  }

  // optional bool has_continuation = 4;
  if (has_has_continuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_continuation(), target);
  }

  // optional .brpc.Feedback feedback = 5;
  if (has_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->feedback_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.StreamFrameMeta)
  return target;
}

int StreamFrameMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.StreamFrameMeta)
  int total_size = 0;

  // required int64 stream_id = 1;
  if (has_stream_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int64 source_stream_id = 2;
    if (has_source_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_stream_id());
    }

    // optional .brpc.FrameType frame_type = 3;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_type());
    }

    // optional bool has_continuation = 4;
    if (has_has_continuation()) {
      total_size += 1 + 1;
    }

    // optional .brpc.Feedback feedback = 5;
    if (has_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feedback_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamFrameMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.StreamFrameMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamFrameMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamFrameMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.StreamFrameMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.StreamFrameMeta)
    MergeFrom(*source);
  }
}

void StreamFrameMeta::MergeFrom(const StreamFrameMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.StreamFrameMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_source_stream_id()) {
      set_source_stream_id(from.source_stream_id());
    }
    if (from.has_frame_type()) {
      set_frame_type(from.frame_type());
    }
    if (from.has_has_continuation()) {
      set_has_continuation(from.has_continuation());
    }
    if (from.has_feedback()) {
      mutable_feedback()->::brpc::Feedback::MergeFrom(from.feedback());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamFrameMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.StreamFrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamFrameMeta::CopyFrom(const StreamFrameMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.StreamFrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamFrameMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StreamFrameMeta::Swap(StreamFrameMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamFrameMeta::InternalSwap(StreamFrameMeta* other) {
  std::swap(stream_id_, other->stream_id_);
  std::swap(source_stream_id_, other->source_stream_id_);
  std::swap(frame_type_, other->frame_type_);
  std::swap(has_continuation_, other->has_continuation_);
  std::swap(feedback_, other->feedback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamFrameMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamFrameMeta_descriptor_;
  metadata.reflection = StreamFrameMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamFrameMeta

// required int64 stream_id = 1;
bool StreamFrameMeta::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamFrameMeta::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamFrameMeta::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamFrameMeta::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
 ::google::protobuf::int64 StreamFrameMeta::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.stream_id)
  return stream_id_;
}
 void StreamFrameMeta::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.stream_id)
}

// optional int64 source_stream_id = 2;
bool StreamFrameMeta::has_source_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamFrameMeta::set_has_source_stream_id() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamFrameMeta::clear_has_source_stream_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamFrameMeta::clear_source_stream_id() {
  source_stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_stream_id();
}
 ::google::protobuf::int64 StreamFrameMeta::source_stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.source_stream_id)
  return source_stream_id_;
}
 void StreamFrameMeta::set_source_stream_id(::google::protobuf::int64 value) {
  set_has_source_stream_id();
  source_stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.source_stream_id)
}

// optional .brpc.FrameType frame_type = 3;
bool StreamFrameMeta::has_frame_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamFrameMeta::set_has_frame_type() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamFrameMeta::clear_has_frame_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamFrameMeta::clear_frame_type() {
  frame_type_ = 0;
  clear_has_frame_type();
}
 ::brpc::FrameType StreamFrameMeta::frame_type() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.frame_type)
  return static_cast< ::brpc::FrameType >(frame_type_);
}
 void StreamFrameMeta::set_frame_type(::brpc::FrameType value) {
  assert(::brpc::FrameType_IsValid(value));
  set_has_frame_type();
  frame_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.frame_type)
}

// optional bool has_continuation = 4;
bool StreamFrameMeta::has_has_continuation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreamFrameMeta::set_has_has_continuation() {
  _has_bits_[0] |= 0x00000008u;
}
void StreamFrameMeta::clear_has_has_continuation() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreamFrameMeta::clear_has_continuation() {
  has_continuation_ = false;
  clear_has_has_continuation();
}
 bool StreamFrameMeta::has_continuation() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.has_continuation)
  return has_continuation_;
}
 void StreamFrameMeta::set_has_continuation(bool value) {
  set_has_has_continuation();
  has_continuation_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.has_continuation)
}

// optional .brpc.Feedback feedback = 5;
bool StreamFrameMeta::has_feedback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StreamFrameMeta::set_has_feedback() {
  _has_bits_[0] |= 0x00000010u;
}
void StreamFrameMeta::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000010u;
}
void StreamFrameMeta::clear_feedback() {
  if (feedback_ != NULL) feedback_->::brpc::Feedback::Clear();
  clear_has_feedback();
}
const ::brpc::Feedback& StreamFrameMeta::feedback() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.feedback)
  return feedback_ != NULL ? *feedback_ : *default_instance_->feedback_;
}
::brpc::Feedback* StreamFrameMeta::mutable_feedback() {
  set_has_feedback();
  if (feedback_ == NULL) {
    feedback_ = new ::brpc::Feedback;
  }
  // @@protoc_insertion_point(field_mutable:brpc.StreamFrameMeta.feedback)
  return feedback_;
}
::brpc::Feedback* StreamFrameMeta::release_feedback() {
  // @@protoc_insertion_point(field_release:brpc.StreamFrameMeta.feedback)
  clear_has_feedback();
  ::brpc::Feedback* temp = feedback_;
  feedback_ = NULL;
  return temp;
}
void StreamFrameMeta::set_allocated_feedback(::brpc::Feedback* feedback) {
  delete feedback_;
  feedback_ = feedback;
  if (feedback) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  // @@protoc_insertion_point(field_set_allocated:brpc.StreamFrameMeta.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kConsumedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.Feedback)
}

void Feedback::InitAsDefaultInstance() {
}

Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.Feedback)
}

void Feedback::SharedCtor() {
  _cached_size_ = 0;
  consumed_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:brpc.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Feedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feedback_descriptor_;
}

const Feedback& Feedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fstreaming_5frpc_5fmeta_2eproto();
  return *default_instance_;
}

Feedback* Feedback::default_instance_ = NULL;

Feedback* Feedback::New(::google::protobuf::Arena* arena) const {
  Feedback* n = new Feedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.Feedback)
  consumed_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.Feedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 consumed_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &consumed_size_)));
          set_has_consumed_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.Feedback)
  // optional int64 consumed_size = 1;
  if (has_consumed_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->consumed_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.Feedback)
  // optional int64 consumed_size = 1;
  if (has_consumed_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->consumed_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.Feedback)
  return target;
}

int Feedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.Feedback)
  int total_size = 0;

  // optional int64 consumed_size = 1;
  if (has_consumed_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->consumed_size());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.Feedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Feedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.Feedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consumed_size()) {
      set_consumed_size(from.consumed_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {

  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  std::swap(consumed_size_, other->consumed_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feedback_descriptor_;
  metadata.reflection = Feedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feedback

// optional int64 consumed_size = 1;
bool Feedback::has_consumed_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Feedback::set_has_consumed_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Feedback::clear_has_consumed_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Feedback::clear_consumed_size() {
  consumed_size_ = GOOGLE_LONGLONG(0);
  clear_has_consumed_size();
}
 ::google::protobuf::int64 Feedback::consumed_size() const {
  // @@protoc_insertion_point(field_get:brpc.Feedback.consumed_size)
  return consumed_size_;
}
 void Feedback::set_consumed_size(::google::protobuf::int64 value) {
  set_has_consumed_size();
  consumed_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.Feedback.consumed_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
