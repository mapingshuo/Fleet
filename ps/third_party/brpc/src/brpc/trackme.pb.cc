// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/trackme.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/trackme.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* TrackMeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackMeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackMeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackMeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrackMeSeverity_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* TrackMeService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2ftrackme_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_brpc_2ftrackme_2eproto() {
  protobuf_AddDesc_brpc_2ftrackme_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/trackme.proto");
  GOOGLE_CHECK(file != NULL);
  TrackMeRequest_descriptor_ = file->message_type(0);
  static const int TrackMeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeRequest, rpc_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeRequest, server_addr_),
  };
  TrackMeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackMeRequest_descriptor_,
      TrackMeRequest::default_instance_,
      TrackMeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrackMeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeRequest, _internal_metadata_),
      -1);
  TrackMeResponse_descriptor_ = file->message_type(1);
  static const int TrackMeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeResponse, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeResponse, error_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeResponse, new_interval_),
  };
  TrackMeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackMeResponse_descriptor_,
      TrackMeResponse::default_instance_,
      TrackMeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrackMeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMeResponse, _internal_metadata_),
      -1);
  TrackMeSeverity_descriptor_ = file->enum_type(0);
  TrackMeService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2ftrackme_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackMeRequest_descriptor_, &TrackMeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackMeResponse_descriptor_, &TrackMeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2ftrackme_2eproto() {
  delete TrackMeRequest::default_instance_;
  delete TrackMeRequest_reflection_;
  delete TrackMeResponse::default_instance_;
  delete TrackMeResponse_reflection_;
}

void protobuf_AddDesc_brpc_2ftrackme_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_brpc_2ftrackme_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022brpc/trackme.proto\022\004brpc\032\022brpc/options"
    ".proto\":\n\016TrackMeRequest\022\023\n\013rpc_version\030"
    "\001 \001(\003\022\023\n\013server_addr\030\002 \001(\t\"d\n\017TrackMeRes"
    "ponse\022\'\n\010severity\030\001 \001(\0162\025.brpc.TrackMeSe"
    "verity\022\022\n\nerror_text\030\002 \001(\t\022\024\n\014new_interv"
    "al\030\003 \001(\005*F\n\017TrackMeSeverity\022\r\n\tTrackMeOK"
    "\020\000\022\022\n\016TrackMeWarning\020\001\022\020\n\014TrackMeFatal\020\002"
    "2H\n\016TrackMeService\0226\n\007TrackMe\022\024.brpc.Tra"
    "ckMeRequest\032\025.brpc.TrackMeResponseB\003\200\001\001", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/trackme.proto", &protobuf_RegisterTypes);
  TrackMeRequest::default_instance_ = new TrackMeRequest();
  TrackMeResponse::default_instance_ = new TrackMeResponse();
  TrackMeRequest::default_instance_->InitAsDefaultInstance();
  TrackMeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2ftrackme_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2ftrackme_2eproto {
  StaticDescriptorInitializer_brpc_2ftrackme_2eproto() {
    protobuf_AddDesc_brpc_2ftrackme_2eproto();
  }
} static_descriptor_initializer_brpc_2ftrackme_2eproto_;
const ::google::protobuf::EnumDescriptor* TrackMeSeverity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMeSeverity_descriptor_;
}
bool TrackMeSeverity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackMeRequest::kRpcVersionFieldNumber;
const int TrackMeRequest::kServerAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackMeRequest::TrackMeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.TrackMeRequest)
}

void TrackMeRequest::InitAsDefaultInstance() {
}

TrackMeRequest::TrackMeRequest(const TrackMeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.TrackMeRequest)
}

void TrackMeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rpc_version_ = GOOGLE_LONGLONG(0);
  server_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackMeRequest::~TrackMeRequest() {
  // @@protoc_insertion_point(destructor:brpc.TrackMeRequest)
  SharedDtor();
}

void TrackMeRequest::SharedDtor() {
  server_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrackMeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackMeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMeRequest_descriptor_;
}

const TrackMeRequest& TrackMeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2ftrackme_2eproto();
  return *default_instance_;
}

TrackMeRequest* TrackMeRequest::default_instance_ = NULL;

TrackMeRequest* TrackMeRequest::New(::google::protobuf::Arena* arena) const {
  TrackMeRequest* n = new TrackMeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackMeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TrackMeRequest)
  if (_has_bits_[0 / 32] & 3u) {
    rpc_version_ = GOOGLE_LONGLONG(0);
    if (has_server_addr()) {
      server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackMeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.TrackMeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rpc_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rpc_version_)));
          set_has_rpc_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_addr;
        break;
      }

      // optional string server_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_server_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.TrackMeRequest.server_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.TrackMeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.TrackMeRequest)
  return false;
#undef DO_
}

void TrackMeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.TrackMeRequest)
  // optional int64 rpc_version = 1;
  if (has_rpc_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rpc_version(), output);
  }

  // optional string server_addr = 2;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeRequest.server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.TrackMeRequest)
}

::google::protobuf::uint8* TrackMeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TrackMeRequest)
  // optional int64 rpc_version = 1;
  if (has_rpc_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rpc_version(), target);
  }

  // optional string server_addr = 2;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeRequest.server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TrackMeRequest)
  return target;
}

int TrackMeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TrackMeRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 rpc_version = 1;
    if (has_rpc_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rpc_version());
    }

    // optional string server_addr = 2;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackMeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.TrackMeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackMeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackMeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.TrackMeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.TrackMeRequest)
    MergeFrom(*source);
  }
}

void TrackMeRequest::MergeFrom(const TrackMeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TrackMeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_version()) {
      set_rpc_version(from.rpc_version());
    }
    if (from.has_server_addr()) {
      set_has_server_addr();
      server_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_addr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrackMeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.TrackMeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMeRequest::CopyFrom(const TrackMeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TrackMeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMeRequest::IsInitialized() const {

  return true;
}

void TrackMeRequest::Swap(TrackMeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackMeRequest::InternalSwap(TrackMeRequest* other) {
  std::swap(rpc_version_, other->rpc_version_);
  server_addr_.Swap(&other->server_addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackMeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackMeRequest_descriptor_;
  metadata.reflection = TrackMeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackMeRequest

// optional int64 rpc_version = 1;
bool TrackMeRequest::has_rpc_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackMeRequest::set_has_rpc_version() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackMeRequest::clear_has_rpc_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackMeRequest::clear_rpc_version() {
  rpc_version_ = GOOGLE_LONGLONG(0);
  clear_has_rpc_version();
}
 ::google::protobuf::int64 TrackMeRequest::rpc_version() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.rpc_version)
  return rpc_version_;
}
 void TrackMeRequest::set_rpc_version(::google::protobuf::int64 value) {
  set_has_rpc_version();
  rpc_version_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.rpc_version)
}

// optional string server_addr = 2;
bool TrackMeRequest::has_server_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackMeRequest::set_has_server_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackMeRequest::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackMeRequest::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_addr();
}
 const ::std::string& TrackMeRequest::server_addr() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.server_addr)
  return server_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMeRequest::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.server_addr)
}
 void TrackMeRequest::set_server_addr(const char* value) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.TrackMeRequest.server_addr)
}
 void TrackMeRequest::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.TrackMeRequest.server_addr)
}
 ::std::string* TrackMeRequest::mutable_server_addr() {
  set_has_server_addr();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeRequest.server_addr)
  return server_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackMeRequest::release_server_addr() {
  // @@protoc_insertion_point(field_release:brpc.TrackMeRequest.server_addr)
  clear_has_server_addr();
  return server_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMeRequest::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr != NULL) {
    set_has_server_addr();
  } else {
    clear_has_server_addr();
  }
  server_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeRequest.server_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackMeResponse::kSeverityFieldNumber;
const int TrackMeResponse::kErrorTextFieldNumber;
const int TrackMeResponse::kNewIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackMeResponse::TrackMeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.TrackMeResponse)
}

void TrackMeResponse::InitAsDefaultInstance() {
}

TrackMeResponse::TrackMeResponse(const TrackMeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:brpc.TrackMeResponse)
}

void TrackMeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  severity_ = 0;
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackMeResponse::~TrackMeResponse() {
  // @@protoc_insertion_point(destructor:brpc.TrackMeResponse)
  SharedDtor();
}

void TrackMeResponse::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrackMeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackMeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMeResponse_descriptor_;
}

const TrackMeResponse& TrackMeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2ftrackme_2eproto();
  return *default_instance_;
}

TrackMeResponse* TrackMeResponse::default_instance_ = NULL;

TrackMeResponse* TrackMeResponse::New(::google::protobuf::Arena* arena) const {
  TrackMeResponse* n = new TrackMeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackMeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TrackMeResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackMeResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackMeResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(severity_, new_interval_);
    if (has_error_text()) {
      error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackMeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.TrackMeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.TrackMeSeverity severity = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::TrackMeSeverity_IsValid(value)) {
            set_severity(static_cast< ::brpc::TrackMeSeverity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }

      // optional string error_text = 2;
      case 2: {
        if (tag == 18) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.TrackMeResponse.error_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_interval;
        break;
      }

      // optional int32 new_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_new_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_interval_)));
          set_has_new_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.TrackMeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.TrackMeResponse)
  return false;
#undef DO_
}

void TrackMeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.TrackMeResponse)
  // optional .brpc.TrackMeSeverity severity = 1;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->severity(), output);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeResponse.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_text(), output);
  }

  // optional int32 new_interval = 3;
  if (has_new_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.TrackMeResponse)
}

::google::protobuf::uint8* TrackMeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TrackMeResponse)
  // optional .brpc.TrackMeSeverity severity = 1;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->severity(), target);
  }

  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeResponse.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  // optional int32 new_interval = 3;
  if (has_new_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TrackMeResponse)
  return target;
}

int TrackMeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TrackMeResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .brpc.TrackMeSeverity severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

    // optional int32 new_interval = 3;
    if (has_new_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_interval());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackMeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.TrackMeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackMeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackMeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.TrackMeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.TrackMeResponse)
    MergeFrom(*source);
  }
}

void TrackMeResponse::MergeFrom(const TrackMeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TrackMeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_error_text()) {
      set_has_error_text();
      error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
    }
    if (from.has_new_interval()) {
      set_new_interval(from.new_interval());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrackMeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.TrackMeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMeResponse::CopyFrom(const TrackMeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TrackMeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMeResponse::IsInitialized() const {

  return true;
}

void TrackMeResponse::Swap(TrackMeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackMeResponse::InternalSwap(TrackMeResponse* other) {
  std::swap(severity_, other->severity_);
  error_text_.Swap(&other->error_text_);
  std::swap(new_interval_, other->new_interval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackMeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackMeResponse_descriptor_;
  metadata.reflection = TrackMeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackMeResponse

// optional .brpc.TrackMeSeverity severity = 1;
bool TrackMeResponse::has_severity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackMeResponse::set_has_severity() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackMeResponse::clear_has_severity() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackMeResponse::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
 ::brpc::TrackMeSeverity TrackMeResponse::severity() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.severity)
  return static_cast< ::brpc::TrackMeSeverity >(severity_);
}
 void TrackMeResponse::set_severity(::brpc::TrackMeSeverity value) {
  assert(::brpc::TrackMeSeverity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.severity)
}

// optional string error_text = 2;
bool TrackMeResponse::has_error_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackMeResponse::set_has_error_text() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackMeResponse::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackMeResponse::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
 const ::std::string& TrackMeResponse::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.error_text)
  return error_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMeResponse::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.error_text)
}
 void TrackMeResponse::set_error_text(const char* value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.TrackMeResponse.error_text)
}
 void TrackMeResponse::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.TrackMeResponse.error_text)
}
 ::std::string* TrackMeResponse::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeResponse.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackMeResponse::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.TrackMeResponse.error_text)
  clear_has_error_text();
  return error_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMeResponse::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeResponse.error_text)
}

// optional int32 new_interval = 3;
bool TrackMeResponse::has_new_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackMeResponse::set_has_new_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackMeResponse::clear_has_new_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackMeResponse::clear_new_interval() {
  new_interval_ = 0;
  clear_has_new_interval();
}
 ::google::protobuf::int32 TrackMeResponse::new_interval() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.new_interval)
  return new_interval_;
}
 void TrackMeResponse::set_new_interval(::google::protobuf::int32 value) {
  set_has_new_interval();
  new_interval_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.new_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TrackMeService::~TrackMeService() {}

const ::google::protobuf::ServiceDescriptor* TrackMeService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TrackMeService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMeService_descriptor_;
}

void TrackMeService::TrackMe(::google::protobuf::RpcController* controller,
                         const ::brpc::TrackMeRequest*,
                         ::brpc::TrackMeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TrackMe() not implemented.");
  done->Run();
}

void TrackMeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TrackMeService_descriptor_);
  switch(method->index()) {
    case 0:
      TrackMe(controller,
             ::google::protobuf::down_cast<const ::brpc::TrackMeRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::TrackMeResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TrackMeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::TrackMeRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TrackMeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::TrackMeResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TrackMeService_Stub::TrackMeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TrackMeService_Stub::TrackMeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TrackMeService_Stub::~TrackMeService_Stub() {
  if (owns_channel_) delete channel_;
}

void TrackMeService_Stub::TrackMe(::google::protobuf::RpcController* controller,
                              const ::brpc::TrackMeRequest* request,
                              ::brpc::TrackMeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
