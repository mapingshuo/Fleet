// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpi_config.proto

#ifndef PROTOBUF_mpi_5fconfig_2eproto__INCLUDED
#define PROTOBUF_mpi_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mpi_5fconfig_2eproto();
void protobuf_AssignDesc_mpi_5fconfig_2eproto();
void protobuf_ShutdownFile_mpi_5fconfig_2eproto();

class ParallelParams;

// ===================================================================

class ParallelParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ParallelParams) */ {
 public:
  ParallelParams();
  virtual ~ParallelParams();

  ParallelParams(const ParallelParams& from);

  inline ParallelParams& operator=(const ParallelParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParallelParams& default_instance();

  void Swap(ParallelParams* other);

  // implements Message ----------------------------------------------

  inline ParallelParams* New() const { return New(NULL); }

  ParallelParams* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParallelParams& from);
  void MergeFrom(const ParallelParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParallelParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string task_name = 1;
  bool has_task_name() const;
  void clear_task_name();
  static const int kTaskNameFieldNumber = 1;
  const ::std::string& task_name() const;
  void set_task_name(const ::std::string& value);
  void set_task_name(const char* value);
  void set_task_name(const char* value, size_t size);
  ::std::string* mutable_task_name();
  ::std::string* release_task_name();
  void set_allocated_task_name(::std::string* task_name);

  // required string hdfs_path = 2;
  bool has_hdfs_path() const;
  void clear_hdfs_path();
  static const int kHdfsPathFieldNumber = 2;
  const ::std::string& hdfs_path() const;
  void set_hdfs_path(const ::std::string& value);
  void set_hdfs_path(const char* value);
  void set_hdfs_path(const char* value, size_t size);
  ::std::string* mutable_hdfs_path();
  ::std::string* release_hdfs_path();
  void set_allocated_hdfs_path(::std::string* hdfs_path);

  // required string ugi = 3;
  bool has_ugi() const;
  void clear_ugi();
  static const int kUgiFieldNumber = 3;
  const ::std::string& ugi() const;
  void set_ugi(const ::std::string& value);
  void set_ugi(const char* value);
  void set_ugi(const char* value, size_t size);
  ::std::string* mutable_ugi();
  ::std::string* release_ugi();
  void set_allocated_ugi(::std::string* ugi);

  // required string hdfs_output = 4;
  bool has_hdfs_output() const;
  void clear_hdfs_output();
  static const int kHdfsOutputFieldNumber = 4;
  const ::std::string& hdfs_output() const;
  void set_hdfs_output(const ::std::string& value);
  void set_hdfs_output(const char* value);
  void set_hdfs_output(const char* value, size_t size);
  ::std::string* mutable_hdfs_output();
  ::std::string* release_hdfs_output();
  void set_allocated_hdfs_output(::std::string* hdfs_output);

  // required int32 nodes = 5 [default = 1];
  bool has_nodes() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 5;
  ::google::protobuf::int32 nodes() const;
  void set_nodes(::google::protobuf::int32 value);

  // required string walltime = 6 [default = "500:00:00"];
  bool has_walltime() const;
  void clear_walltime();
  static const int kWalltimeFieldNumber = 6;
  const ::std::string& walltime() const;
  void set_walltime(const ::std::string& value);
  void set_walltime(const char* value);
  void set_walltime(const char* value, size_t size);
  ::std::string* mutable_walltime();
  ::std::string* release_walltime();
  void set_allocated_walltime(::std::string* walltime);

  // required string train_files_dir = 7;
  bool has_train_files_dir() const;
  void clear_train_files_dir();
  static const int kTrainFilesDirFieldNumber = 7;
  const ::std::string& train_files_dir() const;
  void set_train_files_dir(const ::std::string& value);
  void set_train_files_dir(const char* value);
  void set_train_files_dir(const char* value, size_t size);
  ::std::string* mutable_train_files_dir();
  ::std::string* release_train_files_dir();
  void set_allocated_train_files_dir(::std::string* train_files_dir);

  // optional int32 train_files_num = 8 [default = 0];
  bool has_train_files_num() const;
  void clear_train_files_num();
  static const int kTrainFilesNumFieldNumber = 8;
  ::google::protobuf::int32 train_files_num() const;
  void set_train_files_num(::google::protobuf::int32 value);

  // required string other_data = 9;
  bool has_other_data() const;
  void clear_other_data();
  static const int kOtherDataFieldNumber = 9;
  const ::std::string& other_data() const;
  void set_other_data(const ::std::string& value);
  void set_other_data(const char* value);
  void set_other_data(const char* value, size_t size);
  ::std::string* mutable_other_data();
  ::std::string* release_other_data();
  void set_allocated_other_data(::std::string* other_data);

  // required string model_file = 10 [default = "model.final"];
  bool has_model_file() const;
  void clear_model_file();
  static const int kModelFileFieldNumber = 10;
  const ::std::string& model_file() const;
  void set_model_file(const ::std::string& value);
  void set_model_file(const char* value);
  void set_model_file(const char* value, size_t size);
  ::std::string* mutable_model_file();
  ::std::string* release_model_file();
  void set_allocated_model_file(::std::string* model_file);

  // required int32 thread_num_per_node = 11 [default = 12];
  bool has_thread_num_per_node() const;
  void clear_thread_num_per_node();
  static const int kThreadNumPerNodeFieldNumber = 11;
  ::google::protobuf::int32 thread_num_per_node() const;
  void set_thread_num_per_node(::google::protobuf::int32 value);

  // required int32 comm_batch = 12 [default = 50000];
  bool has_comm_batch() const;
  void clear_comm_batch();
  static const int kCommBatchFieldNumber = 12;
  ::google::protobuf::int32 comm_batch() const;
  void set_comm_batch(::google::protobuf::int32 value);

  // required int32 save_model_per_comm_times = 13 [default = 10];
  bool has_save_model_per_comm_times() const;
  void clear_save_model_per_comm_times();
  static const int kSaveModelPerCommTimesFieldNumber = 13;
  ::google::protobuf::int32 save_model_per_comm_times() const;
  void set_save_model_per_comm_times(::google::protobuf::int32 value);

  // required int32 total_comm_times = 14 [default = 50000];
  bool has_total_comm_times() const;
  void clear_total_comm_times();
  static const int kTotalCommTimesFieldNumber = 14;
  ::google::protobuf::int32 total_comm_times() const;
  void set_total_comm_times(::google::protobuf::int32 value);

  // required int32 is_push_model_when_save = 15 [default = 1];
  bool has_is_push_model_when_save() const;
  void clear_is_push_model_when_save();
  static const int kIsPushModelWhenSaveFieldNumber = 15;
  ::google::protobuf::int32 is_push_model_when_save() const;
  void set_is_push_model_when_save(::google::protobuf::int32 value);

  // optional int32 dense_comm_divide_mode = 17 [default = 2];
  bool has_dense_comm_divide_mode() const;
  void clear_dense_comm_divide_mode();
  static const int kDenseCommDivideModeFieldNumber = 17;
  ::google::protobuf::int32 dense_comm_divide_mode() const;
  void set_dense_comm_divide_mode(::google::protobuf::int32 value);

  // optional int32 sync_mode = 18 [default = 0];
  bool has_sync_mode() const;
  void clear_sync_mode();
  static const int kSyncModeFieldNumber = 18;
  ::google::protobuf::int32 sync_mode() const;
  void set_sync_mode(::google::protobuf::int32 value);

  // optional int32 download_data_thread_num = 19 [default = 10];
  bool has_download_data_thread_num() const;
  void clear_download_data_thread_num();
  static const int kDownloadDataThreadNumFieldNumber = 19;
  ::google::protobuf::int32 download_data_thread_num() const;
  void set_download_data_thread_num(::google::protobuf::int32 value);

  // optional string testdata_dir = 20 [default = ""];
  bool has_testdata_dir() const;
  void clear_testdata_dir();
  static const int kTestdataDirFieldNumber = 20;
  const ::std::string& testdata_dir() const;
  void set_testdata_dir(const ::std::string& value);
  void set_testdata_dir(const char* value);
  void set_testdata_dir(const char* value, size_t size);
  ::std::string* mutable_testdata_dir();
  ::std::string* release_testdata_dir();
  void set_allocated_testdata_dir(::std::string* testdata_dir);

  // optional string test_file = 21 [default = ""];
  bool has_test_file() const;
  void clear_test_file();
  static const int kTestFileFieldNumber = 21;
  const ::std::string& test_file() const;
  void set_test_file(const ::std::string& value);
  void set_test_file(const char* value);
  void set_test_file(const char* value, size_t size);
  ::std::string* mutable_test_file();
  ::std::string* release_test_file();
  void set_allocated_test_file(::std::string* test_file);

  // optional int32 predict_per_iter = 22 [default = 10];
  bool has_predict_per_iter() const;
  void clear_predict_per_iter();
  static const int kPredictPerIterFieldNumber = 22;
  ::google::protobuf::int32 predict_per_iter() const;
  void set_predict_per_iter(::google::protobuf::int32 value);

  // optional int32 ssp_epoch_gap = 23 [default = 20];
  bool has_ssp_epoch_gap() const;
  void clear_ssp_epoch_gap();
  static const int kSspEpochGapFieldNumber = 23;
  ::google::protobuf::int32 ssp_epoch_gap() const;
  void set_ssp_epoch_gap(::google::protobuf::int32 value);

  // optional int32 proc_per_nodes = 24 [default = 2];
  bool has_proc_per_nodes() const;
  void clear_proc_per_nodes();
  static const int kProcPerNodesFieldNumber = 24;
  ::google::protobuf::int32 proc_per_nodes() const;
  void set_proc_per_nodes(::google::protobuf::int32 value);

  // optional int32 need_auto_adjust_learning_rate = 25 [default = 0];
  bool has_need_auto_adjust_learning_rate() const;
  void clear_need_auto_adjust_learning_rate();
  static const int kNeedAutoAdjustLearningRateFieldNumber = 25;
  ::google::protobuf::int32 need_auto_adjust_learning_rate() const;
  void set_need_auto_adjust_learning_rate(::google::protobuf::int32 value);

  // optional float adjust_base_lr_decrease_threshold = 26 [default = 0];
  bool has_adjust_base_lr_decrease_threshold() const;
  void clear_adjust_base_lr_decrease_threshold();
  static const int kAdjustBaseLrDecreaseThresholdFieldNumber = 26;
  float adjust_base_lr_decrease_threshold() const;
  void set_adjust_base_lr_decrease_threshold(float value);

  // optional int32 need_check_epoch_window = 27 [default = 1];
  bool has_need_check_epoch_window() const;
  void clear_need_check_epoch_window();
  static const int kNeedCheckEpochWindowFieldNumber = 27;
  ::google::protobuf::int32 need_check_epoch_window() const;
  void set_need_check_epoch_window(::google::protobuf::int32 value);

  // optional int32 need_check_iter_window = 28 [default = 10];
  bool has_need_check_iter_window() const;
  void clear_need_check_iter_window();
  static const int kNeedCheckIterWindowFieldNumber = 28;
  ::google::protobuf::int32 need_check_iter_window() const;
  void set_need_check_iter_window(::google::protobuf::int32 value);

  // optional string base_lr_decounts = 29 [default = "2,2,2,1"];
  bool has_base_lr_decounts() const;
  void clear_base_lr_decounts();
  static const int kBaseLrDecountsFieldNumber = 29;
  const ::std::string& base_lr_decounts() const;
  void set_base_lr_decounts(const ::std::string& value);
  void set_base_lr_decounts(const char* value);
  void set_base_lr_decounts(const char* value, size_t size);
  ::std::string* mutable_base_lr_decounts();
  ::std::string* release_base_lr_decounts();
  void set_allocated_base_lr_decounts(::std::string* base_lr_decounts);

  // optional int32 server_worker_mode = 30 [default = 1];
  bool has_server_worker_mode() const;
  void clear_server_worker_mode();
  static const int kServerWorkerModeFieldNumber = 30;
  ::google::protobuf::int32 server_worker_mode() const;
  void set_server_worker_mode(::google::protobuf::int32 value);

  // optional int32 save_model_per_epoch = 31 [default = 1];
  bool has_save_model_per_epoch() const;
  void clear_save_model_per_epoch();
  static const int kSaveModelPerEpochFieldNumber = 31;
  ::google::protobuf::int32 save_model_per_epoch() const;
  void set_save_model_per_epoch(::google::protobuf::int32 value);

  // optional int32 upload_model_per_second = 32 [default = 300];
  bool has_upload_model_per_second() const;
  void clear_upload_model_per_second();
  static const int kUploadModelPerSecondFieldNumber = 32;
  ::google::protobuf::int32 upload_model_per_second() const;
  void set_upload_model_per_second(::google::protobuf::int32 value);

  // optional int32 analyze_model_per_epoch = 33 [default = 0];
  bool has_analyze_model_per_epoch() const;
  void clear_analyze_model_per_epoch();
  static const int kAnalyzeModelPerEpochFieldNumber = 33;
  ::google::protobuf::int32 analyze_model_per_epoch() const;
  void set_analyze_model_per_epoch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ParallelParams)
 private:
  inline void set_has_task_name();
  inline void clear_has_task_name();
  inline void set_has_hdfs_path();
  inline void clear_has_hdfs_path();
  inline void set_has_ugi();
  inline void clear_has_ugi();
  inline void set_has_hdfs_output();
  inline void clear_has_hdfs_output();
  inline void set_has_nodes();
  inline void clear_has_nodes();
  inline void set_has_walltime();
  inline void clear_has_walltime();
  inline void set_has_train_files_dir();
  inline void clear_has_train_files_dir();
  inline void set_has_train_files_num();
  inline void clear_has_train_files_num();
  inline void set_has_other_data();
  inline void clear_has_other_data();
  inline void set_has_model_file();
  inline void clear_has_model_file();
  inline void set_has_thread_num_per_node();
  inline void clear_has_thread_num_per_node();
  inline void set_has_comm_batch();
  inline void clear_has_comm_batch();
  inline void set_has_save_model_per_comm_times();
  inline void clear_has_save_model_per_comm_times();
  inline void set_has_total_comm_times();
  inline void clear_has_total_comm_times();
  inline void set_has_is_push_model_when_save();
  inline void clear_has_is_push_model_when_save();
  inline void set_has_dense_comm_divide_mode();
  inline void clear_has_dense_comm_divide_mode();
  inline void set_has_sync_mode();
  inline void clear_has_sync_mode();
  inline void set_has_download_data_thread_num();
  inline void clear_has_download_data_thread_num();
  inline void set_has_testdata_dir();
  inline void clear_has_testdata_dir();
  inline void set_has_test_file();
  inline void clear_has_test_file();
  inline void set_has_predict_per_iter();
  inline void clear_has_predict_per_iter();
  inline void set_has_ssp_epoch_gap();
  inline void clear_has_ssp_epoch_gap();
  inline void set_has_proc_per_nodes();
  inline void clear_has_proc_per_nodes();
  inline void set_has_need_auto_adjust_learning_rate();
  inline void clear_has_need_auto_adjust_learning_rate();
  inline void set_has_adjust_base_lr_decrease_threshold();
  inline void clear_has_adjust_base_lr_decrease_threshold();
  inline void set_has_need_check_epoch_window();
  inline void clear_has_need_check_epoch_window();
  inline void set_has_need_check_iter_window();
  inline void clear_has_need_check_iter_window();
  inline void set_has_base_lr_decounts();
  inline void clear_has_base_lr_decounts();
  inline void set_has_server_worker_mode();
  inline void clear_has_server_worker_mode();
  inline void set_has_save_model_per_epoch();
  inline void clear_has_save_model_per_epoch();
  inline void set_has_upload_model_per_second();
  inline void clear_has_upload_model_per_second();
  inline void set_has_analyze_model_per_epoch();
  inline void clear_has_analyze_model_per_epoch();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr task_name_;
  ::google::protobuf::internal::ArenaStringPtr hdfs_path_;
  ::google::protobuf::internal::ArenaStringPtr ugi_;
  ::google::protobuf::internal::ArenaStringPtr hdfs_output_;
  static ::std::string* _default_walltime_;
  ::google::protobuf::internal::ArenaStringPtr walltime_;
  ::google::protobuf::int32 nodes_;
  ::google::protobuf::int32 train_files_num_;
  ::google::protobuf::internal::ArenaStringPtr train_files_dir_;
  ::google::protobuf::internal::ArenaStringPtr other_data_;
  static ::std::string* _default_model_file_;
  ::google::protobuf::internal::ArenaStringPtr model_file_;
  ::google::protobuf::int32 thread_num_per_node_;
  ::google::protobuf::int32 comm_batch_;
  ::google::protobuf::int32 save_model_per_comm_times_;
  ::google::protobuf::int32 total_comm_times_;
  ::google::protobuf::int32 is_push_model_when_save_;
  ::google::protobuf::int32 dense_comm_divide_mode_;
  ::google::protobuf::int32 sync_mode_;
  ::google::protobuf::int32 download_data_thread_num_;
  ::google::protobuf::internal::ArenaStringPtr testdata_dir_;
  ::google::protobuf::internal::ArenaStringPtr test_file_;
  ::google::protobuf::int32 predict_per_iter_;
  ::google::protobuf::int32 ssp_epoch_gap_;
  ::google::protobuf::int32 proc_per_nodes_;
  ::google::protobuf::int32 need_auto_adjust_learning_rate_;
  float adjust_base_lr_decrease_threshold_;
  ::google::protobuf::int32 need_check_epoch_window_;
  static ::std::string* _default_base_lr_decounts_;
  ::google::protobuf::internal::ArenaStringPtr base_lr_decounts_;
  ::google::protobuf::int32 need_check_iter_window_;
  ::google::protobuf::int32 server_worker_mode_;
  ::google::protobuf::int32 save_model_per_epoch_;
  ::google::protobuf::int32 upload_model_per_second_;
  ::google::protobuf::int32 analyze_model_per_epoch_;
  friend void  protobuf_AddDesc_mpi_5fconfig_2eproto();
  friend void protobuf_AssignDesc_mpi_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_mpi_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ParallelParams* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ParallelParams

// required string task_name = 1;
inline bool ParallelParams::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParallelParams::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParallelParams::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParallelParams::clear_task_name() {
  task_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_name();
}
inline const ::std::string& ParallelParams::task_name() const {
  // @@protoc_insertion_point(field_get:ParallelParams.task_name)
  return task_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_task_name(const ::std::string& value) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.task_name)
}
inline void ParallelParams::set_task_name(const char* value) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.task_name)
}
inline void ParallelParams::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.task_name)
}
inline ::std::string* ParallelParams::mutable_task_name() {
  set_has_task_name();
  // @@protoc_insertion_point(field_mutable:ParallelParams.task_name)
  return task_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_task_name() {
  // @@protoc_insertion_point(field_release:ParallelParams.task_name)
  clear_has_task_name();
  return task_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_task_name(::std::string* task_name) {
  if (task_name != NULL) {
    set_has_task_name();
  } else {
    clear_has_task_name();
  }
  task_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_name);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.task_name)
}

// required string hdfs_path = 2;
inline bool ParallelParams::has_hdfs_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParallelParams::set_has_hdfs_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParallelParams::clear_has_hdfs_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParallelParams::clear_hdfs_path() {
  hdfs_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hdfs_path();
}
inline const ::std::string& ParallelParams::hdfs_path() const {
  // @@protoc_insertion_point(field_get:ParallelParams.hdfs_path)
  return hdfs_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_hdfs_path(const ::std::string& value) {
  set_has_hdfs_path();
  hdfs_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.hdfs_path)
}
inline void ParallelParams::set_hdfs_path(const char* value) {
  set_has_hdfs_path();
  hdfs_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.hdfs_path)
}
inline void ParallelParams::set_hdfs_path(const char* value, size_t size) {
  set_has_hdfs_path();
  hdfs_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.hdfs_path)
}
inline ::std::string* ParallelParams::mutable_hdfs_path() {
  set_has_hdfs_path();
  // @@protoc_insertion_point(field_mutable:ParallelParams.hdfs_path)
  return hdfs_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_hdfs_path() {
  // @@protoc_insertion_point(field_release:ParallelParams.hdfs_path)
  clear_has_hdfs_path();
  return hdfs_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_hdfs_path(::std::string* hdfs_path) {
  if (hdfs_path != NULL) {
    set_has_hdfs_path();
  } else {
    clear_has_hdfs_path();
  }
  hdfs_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdfs_path);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.hdfs_path)
}

// required string ugi = 3;
inline bool ParallelParams::has_ugi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParallelParams::set_has_ugi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParallelParams::clear_has_ugi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParallelParams::clear_ugi() {
  ugi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ugi();
}
inline const ::std::string& ParallelParams::ugi() const {
  // @@protoc_insertion_point(field_get:ParallelParams.ugi)
  return ugi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_ugi(const ::std::string& value) {
  set_has_ugi();
  ugi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.ugi)
}
inline void ParallelParams::set_ugi(const char* value) {
  set_has_ugi();
  ugi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.ugi)
}
inline void ParallelParams::set_ugi(const char* value, size_t size) {
  set_has_ugi();
  ugi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.ugi)
}
inline ::std::string* ParallelParams::mutable_ugi() {
  set_has_ugi();
  // @@protoc_insertion_point(field_mutable:ParallelParams.ugi)
  return ugi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_ugi() {
  // @@protoc_insertion_point(field_release:ParallelParams.ugi)
  clear_has_ugi();
  return ugi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_ugi(::std::string* ugi) {
  if (ugi != NULL) {
    set_has_ugi();
  } else {
    clear_has_ugi();
  }
  ugi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ugi);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.ugi)
}

// required string hdfs_output = 4;
inline bool ParallelParams::has_hdfs_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParallelParams::set_has_hdfs_output() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParallelParams::clear_has_hdfs_output() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParallelParams::clear_hdfs_output() {
  hdfs_output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hdfs_output();
}
inline const ::std::string& ParallelParams::hdfs_output() const {
  // @@protoc_insertion_point(field_get:ParallelParams.hdfs_output)
  return hdfs_output_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_hdfs_output(const ::std::string& value) {
  set_has_hdfs_output();
  hdfs_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.hdfs_output)
}
inline void ParallelParams::set_hdfs_output(const char* value) {
  set_has_hdfs_output();
  hdfs_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.hdfs_output)
}
inline void ParallelParams::set_hdfs_output(const char* value, size_t size) {
  set_has_hdfs_output();
  hdfs_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.hdfs_output)
}
inline ::std::string* ParallelParams::mutable_hdfs_output() {
  set_has_hdfs_output();
  // @@protoc_insertion_point(field_mutable:ParallelParams.hdfs_output)
  return hdfs_output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_hdfs_output() {
  // @@protoc_insertion_point(field_release:ParallelParams.hdfs_output)
  clear_has_hdfs_output();
  return hdfs_output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_hdfs_output(::std::string* hdfs_output) {
  if (hdfs_output != NULL) {
    set_has_hdfs_output();
  } else {
    clear_has_hdfs_output();
  }
  hdfs_output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdfs_output);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.hdfs_output)
}

// required int32 nodes = 5 [default = 1];
inline bool ParallelParams::has_nodes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParallelParams::set_has_nodes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParallelParams::clear_has_nodes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParallelParams::clear_nodes() {
  nodes_ = 1;
  clear_has_nodes();
}
inline ::google::protobuf::int32 ParallelParams::nodes() const {
  // @@protoc_insertion_point(field_get:ParallelParams.nodes)
  return nodes_;
}
inline void ParallelParams::set_nodes(::google::protobuf::int32 value) {
  set_has_nodes();
  nodes_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.nodes)
}

// required string walltime = 6 [default = "500:00:00"];
inline bool ParallelParams::has_walltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParallelParams::set_has_walltime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParallelParams::clear_has_walltime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParallelParams::clear_walltime() {
  walltime_.ClearToDefaultNoArena(_default_walltime_);
  clear_has_walltime();
}
inline const ::std::string& ParallelParams::walltime() const {
  // @@protoc_insertion_point(field_get:ParallelParams.walltime)
  return walltime_.GetNoArena(_default_walltime_);
}
inline void ParallelParams::set_walltime(const ::std::string& value) {
  set_has_walltime();
  walltime_.SetNoArena(_default_walltime_, value);
  // @@protoc_insertion_point(field_set:ParallelParams.walltime)
}
inline void ParallelParams::set_walltime(const char* value) {
  set_has_walltime();
  walltime_.SetNoArena(_default_walltime_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.walltime)
}
inline void ParallelParams::set_walltime(const char* value, size_t size) {
  set_has_walltime();
  walltime_.SetNoArena(_default_walltime_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.walltime)
}
inline ::std::string* ParallelParams::mutable_walltime() {
  set_has_walltime();
  // @@protoc_insertion_point(field_mutable:ParallelParams.walltime)
  return walltime_.MutableNoArena(_default_walltime_);
}
inline ::std::string* ParallelParams::release_walltime() {
  // @@protoc_insertion_point(field_release:ParallelParams.walltime)
  clear_has_walltime();
  return walltime_.ReleaseNoArena(_default_walltime_);
}
inline void ParallelParams::set_allocated_walltime(::std::string* walltime) {
  if (walltime != NULL) {
    set_has_walltime();
  } else {
    clear_has_walltime();
  }
  walltime_.SetAllocatedNoArena(_default_walltime_, walltime);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.walltime)
}

// required string train_files_dir = 7;
inline bool ParallelParams::has_train_files_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParallelParams::set_has_train_files_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParallelParams::clear_has_train_files_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParallelParams::clear_train_files_dir() {
  train_files_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_files_dir();
}
inline const ::std::string& ParallelParams::train_files_dir() const {
  // @@protoc_insertion_point(field_get:ParallelParams.train_files_dir)
  return train_files_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_train_files_dir(const ::std::string& value) {
  set_has_train_files_dir();
  train_files_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.train_files_dir)
}
inline void ParallelParams::set_train_files_dir(const char* value) {
  set_has_train_files_dir();
  train_files_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.train_files_dir)
}
inline void ParallelParams::set_train_files_dir(const char* value, size_t size) {
  set_has_train_files_dir();
  train_files_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.train_files_dir)
}
inline ::std::string* ParallelParams::mutable_train_files_dir() {
  set_has_train_files_dir();
  // @@protoc_insertion_point(field_mutable:ParallelParams.train_files_dir)
  return train_files_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_train_files_dir() {
  // @@protoc_insertion_point(field_release:ParallelParams.train_files_dir)
  clear_has_train_files_dir();
  return train_files_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_train_files_dir(::std::string* train_files_dir) {
  if (train_files_dir != NULL) {
    set_has_train_files_dir();
  } else {
    clear_has_train_files_dir();
  }
  train_files_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_files_dir);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.train_files_dir)
}

// optional int32 train_files_num = 8 [default = 0];
inline bool ParallelParams::has_train_files_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParallelParams::set_has_train_files_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParallelParams::clear_has_train_files_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParallelParams::clear_train_files_num() {
  train_files_num_ = 0;
  clear_has_train_files_num();
}
inline ::google::protobuf::int32 ParallelParams::train_files_num() const {
  // @@protoc_insertion_point(field_get:ParallelParams.train_files_num)
  return train_files_num_;
}
inline void ParallelParams::set_train_files_num(::google::protobuf::int32 value) {
  set_has_train_files_num();
  train_files_num_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.train_files_num)
}

// required string other_data = 9;
inline bool ParallelParams::has_other_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParallelParams::set_has_other_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParallelParams::clear_has_other_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParallelParams::clear_other_data() {
  other_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_data();
}
inline const ::std::string& ParallelParams::other_data() const {
  // @@protoc_insertion_point(field_get:ParallelParams.other_data)
  return other_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_other_data(const ::std::string& value) {
  set_has_other_data();
  other_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.other_data)
}
inline void ParallelParams::set_other_data(const char* value) {
  set_has_other_data();
  other_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.other_data)
}
inline void ParallelParams::set_other_data(const char* value, size_t size) {
  set_has_other_data();
  other_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.other_data)
}
inline ::std::string* ParallelParams::mutable_other_data() {
  set_has_other_data();
  // @@protoc_insertion_point(field_mutable:ParallelParams.other_data)
  return other_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_other_data() {
  // @@protoc_insertion_point(field_release:ParallelParams.other_data)
  clear_has_other_data();
  return other_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_other_data(::std::string* other_data) {
  if (other_data != NULL) {
    set_has_other_data();
  } else {
    clear_has_other_data();
  }
  other_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_data);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.other_data)
}

// required string model_file = 10 [default = "model.final"];
inline bool ParallelParams::has_model_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParallelParams::set_has_model_file() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParallelParams::clear_has_model_file() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParallelParams::clear_model_file() {
  model_file_.ClearToDefaultNoArena(_default_model_file_);
  clear_has_model_file();
}
inline const ::std::string& ParallelParams::model_file() const {
  // @@protoc_insertion_point(field_get:ParallelParams.model_file)
  return model_file_.GetNoArena(_default_model_file_);
}
inline void ParallelParams::set_model_file(const ::std::string& value) {
  set_has_model_file();
  model_file_.SetNoArena(_default_model_file_, value);
  // @@protoc_insertion_point(field_set:ParallelParams.model_file)
}
inline void ParallelParams::set_model_file(const char* value) {
  set_has_model_file();
  model_file_.SetNoArena(_default_model_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.model_file)
}
inline void ParallelParams::set_model_file(const char* value, size_t size) {
  set_has_model_file();
  model_file_.SetNoArena(_default_model_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.model_file)
}
inline ::std::string* ParallelParams::mutable_model_file() {
  set_has_model_file();
  // @@protoc_insertion_point(field_mutable:ParallelParams.model_file)
  return model_file_.MutableNoArena(_default_model_file_);
}
inline ::std::string* ParallelParams::release_model_file() {
  // @@protoc_insertion_point(field_release:ParallelParams.model_file)
  clear_has_model_file();
  return model_file_.ReleaseNoArena(_default_model_file_);
}
inline void ParallelParams::set_allocated_model_file(::std::string* model_file) {
  if (model_file != NULL) {
    set_has_model_file();
  } else {
    clear_has_model_file();
  }
  model_file_.SetAllocatedNoArena(_default_model_file_, model_file);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.model_file)
}

// required int32 thread_num_per_node = 11 [default = 12];
inline bool ParallelParams::has_thread_num_per_node() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParallelParams::set_has_thread_num_per_node() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParallelParams::clear_has_thread_num_per_node() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParallelParams::clear_thread_num_per_node() {
  thread_num_per_node_ = 12;
  clear_has_thread_num_per_node();
}
inline ::google::protobuf::int32 ParallelParams::thread_num_per_node() const {
  // @@protoc_insertion_point(field_get:ParallelParams.thread_num_per_node)
  return thread_num_per_node_;
}
inline void ParallelParams::set_thread_num_per_node(::google::protobuf::int32 value) {
  set_has_thread_num_per_node();
  thread_num_per_node_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.thread_num_per_node)
}

// required int32 comm_batch = 12 [default = 50000];
inline bool ParallelParams::has_comm_batch() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParallelParams::set_has_comm_batch() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParallelParams::clear_has_comm_batch() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParallelParams::clear_comm_batch() {
  comm_batch_ = 50000;
  clear_has_comm_batch();
}
inline ::google::protobuf::int32 ParallelParams::comm_batch() const {
  // @@protoc_insertion_point(field_get:ParallelParams.comm_batch)
  return comm_batch_;
}
inline void ParallelParams::set_comm_batch(::google::protobuf::int32 value) {
  set_has_comm_batch();
  comm_batch_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.comm_batch)
}

// required int32 save_model_per_comm_times = 13 [default = 10];
inline bool ParallelParams::has_save_model_per_comm_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParallelParams::set_has_save_model_per_comm_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParallelParams::clear_has_save_model_per_comm_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParallelParams::clear_save_model_per_comm_times() {
  save_model_per_comm_times_ = 10;
  clear_has_save_model_per_comm_times();
}
inline ::google::protobuf::int32 ParallelParams::save_model_per_comm_times() const {
  // @@protoc_insertion_point(field_get:ParallelParams.save_model_per_comm_times)
  return save_model_per_comm_times_;
}
inline void ParallelParams::set_save_model_per_comm_times(::google::protobuf::int32 value) {
  set_has_save_model_per_comm_times();
  save_model_per_comm_times_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.save_model_per_comm_times)
}

// required int32 total_comm_times = 14 [default = 50000];
inline bool ParallelParams::has_total_comm_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParallelParams::set_has_total_comm_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParallelParams::clear_has_total_comm_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParallelParams::clear_total_comm_times() {
  total_comm_times_ = 50000;
  clear_has_total_comm_times();
}
inline ::google::protobuf::int32 ParallelParams::total_comm_times() const {
  // @@protoc_insertion_point(field_get:ParallelParams.total_comm_times)
  return total_comm_times_;
}
inline void ParallelParams::set_total_comm_times(::google::protobuf::int32 value) {
  set_has_total_comm_times();
  total_comm_times_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.total_comm_times)
}

// required int32 is_push_model_when_save = 15 [default = 1];
inline bool ParallelParams::has_is_push_model_when_save() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ParallelParams::set_has_is_push_model_when_save() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ParallelParams::clear_has_is_push_model_when_save() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ParallelParams::clear_is_push_model_when_save() {
  is_push_model_when_save_ = 1;
  clear_has_is_push_model_when_save();
}
inline ::google::protobuf::int32 ParallelParams::is_push_model_when_save() const {
  // @@protoc_insertion_point(field_get:ParallelParams.is_push_model_when_save)
  return is_push_model_when_save_;
}
inline void ParallelParams::set_is_push_model_when_save(::google::protobuf::int32 value) {
  set_has_is_push_model_when_save();
  is_push_model_when_save_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.is_push_model_when_save)
}

// optional int32 dense_comm_divide_mode = 17 [default = 2];
inline bool ParallelParams::has_dense_comm_divide_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ParallelParams::set_has_dense_comm_divide_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ParallelParams::clear_has_dense_comm_divide_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ParallelParams::clear_dense_comm_divide_mode() {
  dense_comm_divide_mode_ = 2;
  clear_has_dense_comm_divide_mode();
}
inline ::google::protobuf::int32 ParallelParams::dense_comm_divide_mode() const {
  // @@protoc_insertion_point(field_get:ParallelParams.dense_comm_divide_mode)
  return dense_comm_divide_mode_;
}
inline void ParallelParams::set_dense_comm_divide_mode(::google::protobuf::int32 value) {
  set_has_dense_comm_divide_mode();
  dense_comm_divide_mode_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.dense_comm_divide_mode)
}

// optional int32 sync_mode = 18 [default = 0];
inline bool ParallelParams::has_sync_mode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ParallelParams::set_has_sync_mode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ParallelParams::clear_has_sync_mode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ParallelParams::clear_sync_mode() {
  sync_mode_ = 0;
  clear_has_sync_mode();
}
inline ::google::protobuf::int32 ParallelParams::sync_mode() const {
  // @@protoc_insertion_point(field_get:ParallelParams.sync_mode)
  return sync_mode_;
}
inline void ParallelParams::set_sync_mode(::google::protobuf::int32 value) {
  set_has_sync_mode();
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.sync_mode)
}

// optional int32 download_data_thread_num = 19 [default = 10];
inline bool ParallelParams::has_download_data_thread_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ParallelParams::set_has_download_data_thread_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ParallelParams::clear_has_download_data_thread_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ParallelParams::clear_download_data_thread_num() {
  download_data_thread_num_ = 10;
  clear_has_download_data_thread_num();
}
inline ::google::protobuf::int32 ParallelParams::download_data_thread_num() const {
  // @@protoc_insertion_point(field_get:ParallelParams.download_data_thread_num)
  return download_data_thread_num_;
}
inline void ParallelParams::set_download_data_thread_num(::google::protobuf::int32 value) {
  set_has_download_data_thread_num();
  download_data_thread_num_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.download_data_thread_num)
}

// optional string testdata_dir = 20 [default = ""];
inline bool ParallelParams::has_testdata_dir() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ParallelParams::set_has_testdata_dir() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ParallelParams::clear_has_testdata_dir() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ParallelParams::clear_testdata_dir() {
  testdata_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_testdata_dir();
}
inline const ::std::string& ParallelParams::testdata_dir() const {
  // @@protoc_insertion_point(field_get:ParallelParams.testdata_dir)
  return testdata_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_testdata_dir(const ::std::string& value) {
  set_has_testdata_dir();
  testdata_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.testdata_dir)
}
inline void ParallelParams::set_testdata_dir(const char* value) {
  set_has_testdata_dir();
  testdata_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.testdata_dir)
}
inline void ParallelParams::set_testdata_dir(const char* value, size_t size) {
  set_has_testdata_dir();
  testdata_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.testdata_dir)
}
inline ::std::string* ParallelParams::mutable_testdata_dir() {
  set_has_testdata_dir();
  // @@protoc_insertion_point(field_mutable:ParallelParams.testdata_dir)
  return testdata_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_testdata_dir() {
  // @@protoc_insertion_point(field_release:ParallelParams.testdata_dir)
  clear_has_testdata_dir();
  return testdata_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_testdata_dir(::std::string* testdata_dir) {
  if (testdata_dir != NULL) {
    set_has_testdata_dir();
  } else {
    clear_has_testdata_dir();
  }
  testdata_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), testdata_dir);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.testdata_dir)
}

// optional string test_file = 21 [default = ""];
inline bool ParallelParams::has_test_file() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ParallelParams::set_has_test_file() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ParallelParams::clear_has_test_file() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ParallelParams::clear_test_file() {
  test_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_file();
}
inline const ::std::string& ParallelParams::test_file() const {
  // @@protoc_insertion_point(field_get:ParallelParams.test_file)
  return test_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_test_file(const ::std::string& value) {
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParallelParams.test_file)
}
inline void ParallelParams::set_test_file(const char* value) {
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.test_file)
}
inline void ParallelParams::set_test_file(const char* value, size_t size) {
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.test_file)
}
inline ::std::string* ParallelParams::mutable_test_file() {
  set_has_test_file();
  // @@protoc_insertion_point(field_mutable:ParallelParams.test_file)
  return test_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParallelParams::release_test_file() {
  // @@protoc_insertion_point(field_release:ParallelParams.test_file)
  clear_has_test_file();
  return test_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelParams::set_allocated_test_file(::std::string* test_file) {
  if (test_file != NULL) {
    set_has_test_file();
  } else {
    clear_has_test_file();
  }
  test_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_file);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.test_file)
}

// optional int32 predict_per_iter = 22 [default = 10];
inline bool ParallelParams::has_predict_per_iter() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ParallelParams::set_has_predict_per_iter() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ParallelParams::clear_has_predict_per_iter() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ParallelParams::clear_predict_per_iter() {
  predict_per_iter_ = 10;
  clear_has_predict_per_iter();
}
inline ::google::protobuf::int32 ParallelParams::predict_per_iter() const {
  // @@protoc_insertion_point(field_get:ParallelParams.predict_per_iter)
  return predict_per_iter_;
}
inline void ParallelParams::set_predict_per_iter(::google::protobuf::int32 value) {
  set_has_predict_per_iter();
  predict_per_iter_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.predict_per_iter)
}

// optional int32 ssp_epoch_gap = 23 [default = 20];
inline bool ParallelParams::has_ssp_epoch_gap() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ParallelParams::set_has_ssp_epoch_gap() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ParallelParams::clear_has_ssp_epoch_gap() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ParallelParams::clear_ssp_epoch_gap() {
  ssp_epoch_gap_ = 20;
  clear_has_ssp_epoch_gap();
}
inline ::google::protobuf::int32 ParallelParams::ssp_epoch_gap() const {
  // @@protoc_insertion_point(field_get:ParallelParams.ssp_epoch_gap)
  return ssp_epoch_gap_;
}
inline void ParallelParams::set_ssp_epoch_gap(::google::protobuf::int32 value) {
  set_has_ssp_epoch_gap();
  ssp_epoch_gap_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.ssp_epoch_gap)
}

// optional int32 proc_per_nodes = 24 [default = 2];
inline bool ParallelParams::has_proc_per_nodes() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ParallelParams::set_has_proc_per_nodes() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ParallelParams::clear_has_proc_per_nodes() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ParallelParams::clear_proc_per_nodes() {
  proc_per_nodes_ = 2;
  clear_has_proc_per_nodes();
}
inline ::google::protobuf::int32 ParallelParams::proc_per_nodes() const {
  // @@protoc_insertion_point(field_get:ParallelParams.proc_per_nodes)
  return proc_per_nodes_;
}
inline void ParallelParams::set_proc_per_nodes(::google::protobuf::int32 value) {
  set_has_proc_per_nodes();
  proc_per_nodes_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.proc_per_nodes)
}

// optional int32 need_auto_adjust_learning_rate = 25 [default = 0];
inline bool ParallelParams::has_need_auto_adjust_learning_rate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ParallelParams::set_has_need_auto_adjust_learning_rate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ParallelParams::clear_has_need_auto_adjust_learning_rate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ParallelParams::clear_need_auto_adjust_learning_rate() {
  need_auto_adjust_learning_rate_ = 0;
  clear_has_need_auto_adjust_learning_rate();
}
inline ::google::protobuf::int32 ParallelParams::need_auto_adjust_learning_rate() const {
  // @@protoc_insertion_point(field_get:ParallelParams.need_auto_adjust_learning_rate)
  return need_auto_adjust_learning_rate_;
}
inline void ParallelParams::set_need_auto_adjust_learning_rate(::google::protobuf::int32 value) {
  set_has_need_auto_adjust_learning_rate();
  need_auto_adjust_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.need_auto_adjust_learning_rate)
}

// optional float adjust_base_lr_decrease_threshold = 26 [default = 0];
inline bool ParallelParams::has_adjust_base_lr_decrease_threshold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ParallelParams::set_has_adjust_base_lr_decrease_threshold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ParallelParams::clear_has_adjust_base_lr_decrease_threshold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ParallelParams::clear_adjust_base_lr_decrease_threshold() {
  adjust_base_lr_decrease_threshold_ = 0;
  clear_has_adjust_base_lr_decrease_threshold();
}
inline float ParallelParams::adjust_base_lr_decrease_threshold() const {
  // @@protoc_insertion_point(field_get:ParallelParams.adjust_base_lr_decrease_threshold)
  return adjust_base_lr_decrease_threshold_;
}
inline void ParallelParams::set_adjust_base_lr_decrease_threshold(float value) {
  set_has_adjust_base_lr_decrease_threshold();
  adjust_base_lr_decrease_threshold_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.adjust_base_lr_decrease_threshold)
}

// optional int32 need_check_epoch_window = 27 [default = 1];
inline bool ParallelParams::has_need_check_epoch_window() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ParallelParams::set_has_need_check_epoch_window() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ParallelParams::clear_has_need_check_epoch_window() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ParallelParams::clear_need_check_epoch_window() {
  need_check_epoch_window_ = 1;
  clear_has_need_check_epoch_window();
}
inline ::google::protobuf::int32 ParallelParams::need_check_epoch_window() const {
  // @@protoc_insertion_point(field_get:ParallelParams.need_check_epoch_window)
  return need_check_epoch_window_;
}
inline void ParallelParams::set_need_check_epoch_window(::google::protobuf::int32 value) {
  set_has_need_check_epoch_window();
  need_check_epoch_window_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.need_check_epoch_window)
}

// optional int32 need_check_iter_window = 28 [default = 10];
inline bool ParallelParams::has_need_check_iter_window() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ParallelParams::set_has_need_check_iter_window() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ParallelParams::clear_has_need_check_iter_window() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ParallelParams::clear_need_check_iter_window() {
  need_check_iter_window_ = 10;
  clear_has_need_check_iter_window();
}
inline ::google::protobuf::int32 ParallelParams::need_check_iter_window() const {
  // @@protoc_insertion_point(field_get:ParallelParams.need_check_iter_window)
  return need_check_iter_window_;
}
inline void ParallelParams::set_need_check_iter_window(::google::protobuf::int32 value) {
  set_has_need_check_iter_window();
  need_check_iter_window_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.need_check_iter_window)
}

// optional string base_lr_decounts = 29 [default = "2,2,2,1"];
inline bool ParallelParams::has_base_lr_decounts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ParallelParams::set_has_base_lr_decounts() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ParallelParams::clear_has_base_lr_decounts() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ParallelParams::clear_base_lr_decounts() {
  base_lr_decounts_.ClearToDefaultNoArena(_default_base_lr_decounts_);
  clear_has_base_lr_decounts();
}
inline const ::std::string& ParallelParams::base_lr_decounts() const {
  // @@protoc_insertion_point(field_get:ParallelParams.base_lr_decounts)
  return base_lr_decounts_.GetNoArena(_default_base_lr_decounts_);
}
inline void ParallelParams::set_base_lr_decounts(const ::std::string& value) {
  set_has_base_lr_decounts();
  base_lr_decounts_.SetNoArena(_default_base_lr_decounts_, value);
  // @@protoc_insertion_point(field_set:ParallelParams.base_lr_decounts)
}
inline void ParallelParams::set_base_lr_decounts(const char* value) {
  set_has_base_lr_decounts();
  base_lr_decounts_.SetNoArena(_default_base_lr_decounts_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParallelParams.base_lr_decounts)
}
inline void ParallelParams::set_base_lr_decounts(const char* value, size_t size) {
  set_has_base_lr_decounts();
  base_lr_decounts_.SetNoArena(_default_base_lr_decounts_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParallelParams.base_lr_decounts)
}
inline ::std::string* ParallelParams::mutable_base_lr_decounts() {
  set_has_base_lr_decounts();
  // @@protoc_insertion_point(field_mutable:ParallelParams.base_lr_decounts)
  return base_lr_decounts_.MutableNoArena(_default_base_lr_decounts_);
}
inline ::std::string* ParallelParams::release_base_lr_decounts() {
  // @@protoc_insertion_point(field_release:ParallelParams.base_lr_decounts)
  clear_has_base_lr_decounts();
  return base_lr_decounts_.ReleaseNoArena(_default_base_lr_decounts_);
}
inline void ParallelParams::set_allocated_base_lr_decounts(::std::string* base_lr_decounts) {
  if (base_lr_decounts != NULL) {
    set_has_base_lr_decounts();
  } else {
    clear_has_base_lr_decounts();
  }
  base_lr_decounts_.SetAllocatedNoArena(_default_base_lr_decounts_, base_lr_decounts);
  // @@protoc_insertion_point(field_set_allocated:ParallelParams.base_lr_decounts)
}

// optional int32 server_worker_mode = 30 [default = 1];
inline bool ParallelParams::has_server_worker_mode() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ParallelParams::set_has_server_worker_mode() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ParallelParams::clear_has_server_worker_mode() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ParallelParams::clear_server_worker_mode() {
  server_worker_mode_ = 1;
  clear_has_server_worker_mode();
}
inline ::google::protobuf::int32 ParallelParams::server_worker_mode() const {
  // @@protoc_insertion_point(field_get:ParallelParams.server_worker_mode)
  return server_worker_mode_;
}
inline void ParallelParams::set_server_worker_mode(::google::protobuf::int32 value) {
  set_has_server_worker_mode();
  server_worker_mode_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.server_worker_mode)
}

// optional int32 save_model_per_epoch = 31 [default = 1];
inline bool ParallelParams::has_save_model_per_epoch() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ParallelParams::set_has_save_model_per_epoch() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ParallelParams::clear_has_save_model_per_epoch() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ParallelParams::clear_save_model_per_epoch() {
  save_model_per_epoch_ = 1;
  clear_has_save_model_per_epoch();
}
inline ::google::protobuf::int32 ParallelParams::save_model_per_epoch() const {
  // @@protoc_insertion_point(field_get:ParallelParams.save_model_per_epoch)
  return save_model_per_epoch_;
}
inline void ParallelParams::set_save_model_per_epoch(::google::protobuf::int32 value) {
  set_has_save_model_per_epoch();
  save_model_per_epoch_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.save_model_per_epoch)
}

// optional int32 upload_model_per_second = 32 [default = 300];
inline bool ParallelParams::has_upload_model_per_second() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ParallelParams::set_has_upload_model_per_second() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ParallelParams::clear_has_upload_model_per_second() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ParallelParams::clear_upload_model_per_second() {
  upload_model_per_second_ = 300;
  clear_has_upload_model_per_second();
}
inline ::google::protobuf::int32 ParallelParams::upload_model_per_second() const {
  // @@protoc_insertion_point(field_get:ParallelParams.upload_model_per_second)
  return upload_model_per_second_;
}
inline void ParallelParams::set_upload_model_per_second(::google::protobuf::int32 value) {
  set_has_upload_model_per_second();
  upload_model_per_second_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.upload_model_per_second)
}

// optional int32 analyze_model_per_epoch = 33 [default = 0];
inline bool ParallelParams::has_analyze_model_per_epoch() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ParallelParams::set_has_analyze_model_per_epoch() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ParallelParams::clear_has_analyze_model_per_epoch() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ParallelParams::clear_analyze_model_per_epoch() {
  analyze_model_per_epoch_ = 0;
  clear_has_analyze_model_per_epoch();
}
inline ::google::protobuf::int32 ParallelParams::analyze_model_per_epoch() const {
  // @@protoc_insertion_point(field_get:ParallelParams.analyze_model_per_epoch)
  return analyze_model_per_epoch_;
}
inline void ParallelParams::set_analyze_model_per_epoch(::google::protobuf::int32 value) {
  set_has_analyze_model_per_epoch();
  analyze_model_per_epoch_ = value;
  // @@protoc_insertion_point(field_set:ParallelParams.analyze_model_per_epoch)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mpi_5fconfig_2eproto__INCLUDED
